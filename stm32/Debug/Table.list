
Table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007418  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800763c  0800763c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800763c  0800763c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800763c  0800763c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  08007650  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08007650  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012258  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f3e  00000000  00000000  0003228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00036270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b289  00000000  00000000  00037170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000120b1  00000000  00000000  000523f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ab3c  00000000  00000000  000644aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fefe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004180  00000000  00000000  000ff064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080075e4 	.word	0x080075e4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080075e4 	.word	0x080075e4

08000224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <MX_ADC1_Init+0x74>)
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <MX_ADC1_Init+0x78>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_ADC1_Init+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_ADC1_Init+0x74>)
 800024e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000252:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <MX_ADC1_Init+0x74>)
 8000262:	f000 fd17 	bl	8000c94 <HAL_ADC_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 fa70 	bl	8000750 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000270:	2302      	movs	r3, #2
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000278:	2301      	movs	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4619      	mov	r1, r3
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_ADC1_Init+0x74>)
 8000282:	f001 f87b 	bl	800137c <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800028c:	f000 fa60 	bl	8000750 <Error_Handler>
  }

}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000058 	.word	0x20000058
 800029c:	40012400 	.word	0x40012400

080002a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a2c      	ldr	r2, [pc, #176]	; (800036c <HAL_ADC_MspInit+0xcc>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d151      	bne.n	8000364 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002c0:	4b2b      	ldr	r3, [pc, #172]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a2a      	ldr	r2, [pc, #168]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b28      	ldr	r3, [pc, #160]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b25      	ldr	r3, [pc, #148]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a24      	ldr	r2, [pc, #144]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002f0:	2304      	movs	r3, #4
 80002f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f4:	2303      	movs	r3, #3
 80002f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	481d      	ldr	r0, [pc, #116]	; (8000374 <HAL_ADC_MspInit+0xd4>)
 8000300:	f001 fe9e 	bl	8002040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <HAL_ADC_MspInit+0xdc>)
 8000308:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 800031e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000322:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 8000326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 8000334:	2200      	movs	r2, #0
 8000336:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000338:	480f      	ldr	r0, [pc, #60]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 800033a:	f001 fabb 	bl	80018b4 <HAL_DMA_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000344:	f000 fa04 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 800034c:	621a      	str	r2, [r3, #32]
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <HAL_ADC_MspInit+0xd8>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	2012      	movs	r0, #18
 800035a:	f001 fa74 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800035e:	2012      	movs	r0, #18
 8000360:	f001 fa8d 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000364:	bf00      	nop
 8000366:	3720      	adds	r7, #32
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40012400 	.word	0x40012400
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	20000088 	.word	0x20000088
 800037c:	40020008 	.word	0x40020008

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_DMA_Init+0x58>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <MX_DMA_Init+0x58>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_DMA_Init+0x58>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200b      	movs	r0, #11
 80003a4:	f001 fa4f 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003a8:	200b      	movs	r0, #11
 80003aa:	f001 fa68 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2010      	movs	r0, #16
 80003b4:	f001 fa47 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003b8:	2010      	movs	r0, #16
 80003ba:	f001 fa60 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	2011      	movs	r0, #17
 80003c4:	f001 fa3f 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003c8:	2011      	movs	r0, #17
 80003ca:	f001 fa58 	bl	800187e <HAL_NVIC_EnableIRQ>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <MX_GPIO_Init+0xdc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <MX_GPIO_Init+0xdc>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <MX_GPIO_Init+0xdc>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b2b      	ldr	r3, [pc, #172]	; (80004b8 <MX_GPIO_Init+0xdc>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a2a      	ldr	r2, [pc, #168]	; (80004b8 <MX_GPIO_Init+0xdc>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_GPIO_Init+0xdc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRIDGE1_LEFT_LOW_Pin|BRIDGE1_RIGHT_LOW_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f240 4104 	movw	r1, #1028	; 0x404
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <MX_GPIO_Init+0xe0>)
 8000440:	f001 ff7f 	bl	8002342 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_FAILURE_Pin;
 8000444:	2301      	movs	r3, #1
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(POWER_FAILURE_GPIO_Port, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	481a      	ldr	r0, [pc, #104]	; (80004c0 <MX_GPIO_Init+0xe4>)
 8000458:	f001 fdf2 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BRIDGE1_LEFT_LOW_Pin|BRIDGE1_RIGHT_LOW_Pin;
 800045c:	f240 4304 	movw	r3, #1028	; 0x404
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4811      	ldr	r0, [pc, #68]	; (80004bc <MX_GPIO_Init+0xe0>)
 8000476:	f001 fde3 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR1_ENCODER_Pin;
 800047a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR1_ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	480d      	ldr	r0, [pc, #52]	; (80004c4 <MX_GPIO_Init+0xe8>)
 8000490:	f001 fdd6 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin
 8000494:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000498:	613b      	str	r3, [r7, #16]
                          |BUTTON5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	2301      	movs	r3, #1
 80004a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_GPIO_Init+0xe4>)
 80004aa:	f001 fdc9 	bl	8002040 <HAL_GPIO_Init>

}
 80004ae:	bf00      	nop
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40011000 	.word	0x40011000

080004c8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MX_I2C1_Init+0x50>)
 80004ce:	4a13      	ldr	r2, [pc, #76]	; (800051c <MX_I2C1_Init+0x54>)
 80004d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_I2C1_Init+0x50>)
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_I2C1_Init+0x58>)
 80004d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_I2C1_Init+0x50>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_I2C1_Init+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_I2C1_Init+0x50>)
 80004e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <MX_I2C1_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_I2C1_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <MX_I2C1_Init+0x50>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_I2C1_Init+0x50>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_I2C1_Init+0x50>)
 8000506:	f001 ff35 	bl	8002374 <HAL_I2C_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000510:	f000 f91e 	bl	8000750 <Error_Handler>
  }

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000110 	.word	0x20000110
 800051c:	40005400 	.word	0x40005400
 8000520:	000186a0 	.word	0x000186a0

08000524 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a43      	ldr	r2, [pc, #268]	; (800064c <HAL_I2C_MspInit+0x128>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d17f      	bne.n	8000644 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b42      	ldr	r3, [pc, #264]	; (8000650 <HAL_I2C_MspInit+0x12c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a41      	ldr	r2, [pc, #260]	; (8000650 <HAL_I2C_MspInit+0x12c>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <HAL_I2C_MspInit+0x12c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 800055c:	23c0      	movs	r3, #192	; 0xc0
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000560:	2312      	movs	r3, #18
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4839      	ldr	r0, [pc, #228]	; (8000654 <HAL_I2C_MspInit+0x130>)
 8000570:	f001 fd66 	bl	8002040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000574:	4b36      	ldr	r3, [pc, #216]	; (8000650 <HAL_I2C_MspInit+0x12c>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a35      	ldr	r2, [pc, #212]	; (8000650 <HAL_I2C_MspInit+0x12c>)
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b33      	ldr	r3, [pc, #204]	; (8000650 <HAL_I2C_MspInit+0x12c>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <HAL_I2C_MspInit+0x134>)
 800058e:	4a33      	ldr	r2, [pc, #204]	; (800065c <HAL_I2C_MspInit+0x138>)
 8000590:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000592:	4b31      	ldr	r3, [pc, #196]	; (8000658 <HAL_I2C_MspInit+0x134>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <HAL_I2C_MspInit+0x134>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80005bc:	4826      	ldr	r0, [pc, #152]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005be:	f001 f979 	bl	80018b4 <HAL_DMA_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80005c8:	f000 f8c2 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a22      	ldr	r2, [pc, #136]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
 80005d2:	4a21      	ldr	r2, [pc, #132]	; (8000658 <HAL_I2C_MspInit+0x134>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80005d8:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <HAL_I2C_MspInit+0x140>)
 80005dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005e0:	2210      	movs	r2, #16
 80005e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 800060a:	f001 f953 	bl	80018b4 <HAL_DMA_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000614:	f000 f89c 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_I2C_MspInit+0x13c>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	201f      	movs	r0, #31
 800062a:	f001 f90c 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800062e:	201f      	movs	r0, #31
 8000630:	f001 f925 	bl	800187e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2020      	movs	r0, #32
 800063a:	f001 f904 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800063e:	2020      	movs	r0, #32
 8000640:	f001 f91d 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40005400 	.word	0x40005400
 8000650:	40021000 	.word	0x40021000
 8000654:	40010c00 	.word	0x40010c00
 8000658:	20000164 	.word	0x20000164
 800065c:	40020080 	.word	0x40020080
 8000660:	200000cc 	.word	0x200000cc
 8000664:	4002006c 	.word	0x4002006c

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fa8e 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f816 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f7ff feb2 	bl	80003dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000678:	f7ff fe82 	bl	8000380 <MX_DMA_Init>
  MX_I2C1_Init();
 800067c:	f7ff ff24 	bl	80004c8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000680:	f7ff fdd0 	bl	8000224 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000684:	f000 f91e 	bl	80008c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000688:	f000 f968 	bl	800095c <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  appInit();
 800068c:	f006 fa3a 	bl	8006b04 <appInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <main+0x34>)
 8000692:	f005 fa4d 	bl	8005b30 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainLoop();
 8000696:	f006 fa4f 	bl	8006b38 <mainLoop>
 800069a:	e7fc      	b.n	8000696 <main+0x2e>
 800069c:	200001f0 	.word	0x200001f0

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b096      	sub	sp, #88	; 0x58
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006aa:	2228      	movs	r2, #40	; 0x28
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 ff90 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006e4:	2300      	movs	r3, #0
 80006e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80006e8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80006ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fc12 	bl	8004f1c <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006fe:	f000 f827 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fe7d 	bl	800541c <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000728:	f000 f812 	bl	8000750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800072c:	2302      	movs	r3, #2
 800072e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000730:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000734:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f005 f80b 	bl	8005754 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000744:	f000 f804 	bl	8000750 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_MspInit+0x5c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <HAL_MspInit+0x5c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x5c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x5c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_MspInit+0x60>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_MspInit+0x60>)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010000 	.word	0x40010000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <HardFault_Handler+0x4>

080007d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <BusFault_Handler+0x4>

080007de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 fa04 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <DMA1_Channel1_IRQHandler+0x10>)
 800081a:	f001 f9c9 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000088 	.word	0x20000088

08000828 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <DMA1_Channel6_IRQHandler+0x10>)
 800082e:	f001 f9bf 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000cc 	.word	0x200000cc

0800083c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <DMA1_Channel7_IRQHandler+0x10>)
 8000842:	f001 f9b5 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000164 	.word	0x20000164

08000850 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <ADC1_2_IRQHandler+0x10>)
 8000856:	f000 fcbb 	bl	80011d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000058 	.word	0x20000058

08000864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  timer();
 8000868:	f006 f95a 	bl	8006b20 <timer>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <TIM2_IRQHandler+0x14>)
 800086e:	f005 fb41 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001f0 	.word	0x200001f0

0800087c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM3_IRQHandler+0x10>)
 8000882:	f005 fb37 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200001a8 	.word	0x200001a8

08000890 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <I2C1_EV_IRQHandler+0x10>)
 8000896:	f002 fb2f 	bl	8002ef8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000110 	.word	0x20000110

080008a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <I2C1_ER_IRQHandler+0x10>)
 80008aa:	f002 fc92 	bl	80031d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000110 	.word	0x20000110

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_TIM2_Init+0x94>)
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM2_Init+0x94>)
 80008ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM2_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_TIM2_Init+0x94>)
 80008f8:	2220      	movs	r2, #32
 80008fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_TIM2_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_TIM2_Init+0x94>)
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_TIM2_Init+0x94>)
 800090a:	f005 f8c1 	bl	8005a90 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000914:	f7ff ff1c 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_TIM2_Init+0x94>)
 8000926:	f005 fcab 	bl	8006280 <HAL_TIM_ConfigClockSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000930:	f7ff ff0e 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_TIM2_Init+0x94>)
 8000942:	f006 f861 	bl	8006a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800094c:	f7ff ff00 	bl	8000750 <Error_Handler>
  }

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001f0 	.word	0x200001f0

0800095c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_TIM3_Init+0xf8>)
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <MX_TIM3_Init+0xfc>)
 8000990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <MX_TIM3_Init+0xf8>)
 8000994:	2210      	movs	r2, #16
 8000996:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_TIM3_Init+0xf8>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128;
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b0:	4828      	ldr	r0, [pc, #160]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009b2:	f005 f86d 	bl	8005a90 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80009bc:	f7ff fec8 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4821      	ldr	r0, [pc, #132]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009ce:	f005 fc57 	bl	8006280 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80009d8:	f7ff feba 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009dc:	481d      	ldr	r0, [pc, #116]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009de:	f005 f907 	bl	8005bf0 <HAL_TIM_PWM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009e8:	f7ff feb2 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4619      	mov	r1, r3
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <MX_TIM3_Init+0xf8>)
 80009fc:	f006 f804 	bl	8006a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000a06:	f7ff fea3 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	; 0x60
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 128;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM3_Init+0xf8>)
 8000a22:	f005 fb6f 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000a2c:	f7ff fe90 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	220c      	movs	r2, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM3_Init+0xf8>)
 8000a38:	f005 fb64 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000a42:	f7ff fe85 	bl	8000750 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM3_Init+0xf8>)
 8000a48:	f000 f848 	bl	8000adc <HAL_TIM_MspPostInit>

}
 8000a4c:	bf00      	nop
 8000a4e:	3738      	adds	r7, #56	; 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001a8 	.word	0x200001a8
 8000a58:	40000400 	.word	0x40000400

08000a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a6c:	d114      	bne.n	8000a98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	201c      	movs	r0, #28
 8000a8c:	f000 fedb 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a90:	201c      	movs	r0, #28
 8000a92:	f000 fef4 	bl	800187e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a96:	e018      	b.n	8000aca <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d113      	bne.n	8000aca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_TIM_Base_MspInit+0x78>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	201d      	movs	r0, #29
 8000ac0:	f000 fec1 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ac4:	201d      	movs	r0, #29
 8000ac6:	f000 feda 	bl	800187e <HAL_NVIC_EnableIRQ>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40000400 	.word	0x40000400

08000adc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_TIM_MspPostInit+0x58>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d117      	bne.n	8000b2c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_TIM_MspPostInit+0x5c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_TIM_MspPostInit+0x5c>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_TIM_MspPostInit+0x5c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BRIDGE1_LEFT_HIGH_Pin|BRIDGE_RIGHT_HIGH_Pin;
 8000b14:	2303      	movs	r3, #3
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_TIM_MspPostInit+0x60>)
 8000b28:	f001 fa8a 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40000400 	.word	0x40000400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010c00 	.word	0x40010c00

08000b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b42:	e003      	b.n	8000b4c <LoopCopyDataInit>

08000b44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b4a:	3104      	adds	r1, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b54:	d3f6      	bcc.n	8000b44 <CopyDataInit>
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b58:	e002      	b.n	8000b60 <LoopFillZerobss>

08000b5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b5c:	f842 3b04 	str.w	r3, [r2], #4

08000b60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b64:	d3f9      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b66:	f7ff fea7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f006 fd0f 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6e:	f7ff fd7b 	bl	8000668 <main>
  bx lr
 8000b72:	4770      	bx	lr
  ldr r3, =_sidata
 8000b74:	08007644 	.word	0x08007644
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b80:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b84:	2000025c 	.word	0x2000025c

08000b88 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC3_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x28>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x28>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 fe47 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fdd8 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fe5f 	bl	800189a <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 fe27 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000238 	.word	0x20000238

08000c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000238 	.word	0x20000238

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fff0 	bl	8000c3c <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_Delay+0x40>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffe0 	bl	8000c3c <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0ce      	b.n	8000e54 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fae4 	bl	80002a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 fc99 	bl	8001610 <ADC_ConversionStop_Disable>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a9 	bne.w	8000e42 <HAL_ADC_Init+0x1ae>
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 80a5 	bne.w	8000e42 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	f043 0202 	orr.w	r2, r3, #2
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4951      	ldr	r1, [pc, #324]	; (8000e5c <HAL_ADC_Init+0x1c8>)
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d10a      	bne.n	8000d30 <HAL_ADC_Init+0x9c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000d22:	d002      	beq.n	8000d2a <HAL_ADC_Init+0x96>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	e004      	b.n	8000d34 <HAL_ADC_Init+0xa0>
 8000d2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d2e:	e001      	b.n	8000d34 <HAL_ADC_Init+0xa0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7b1b      	ldrb	r3, [r3, #12]
 8000d3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d4c:	d003      	beq.n	8000d56 <HAL_ADC_Init+0xc2>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d102      	bne.n	8000d5c <HAL_ADC_Init+0xc8>
 8000d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5a:	e000      	b.n	8000d5e <HAL_ADC_Init+0xca>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7d1b      	ldrb	r3, [r3, #20]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d119      	bne.n	8000da0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	035a      	lsls	r2, r3, #13
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	e00b      	b.n	8000da0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f043 0220 	orr.w	r2, r3, #32
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	f043 0201 	orr.w	r2, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <HAL_ADC_Init+0x1cc>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd0:	d003      	beq.n	8000dda <HAL_ADC_Init+0x146>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d104      	bne.n	8000de4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_ADC_Init+0x1d0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d10b      	bne.n	8000e20 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f023 0303 	bic.w	r3, r3, #3
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e1e:	e018      	b.n	8000e52 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f023 0312 	bic.w	r3, r3, #18
 8000e28:	f043 0210 	orr.w	r2, r3, #16
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e40:	e007      	b.n	8000e52 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40013c00 	.word	0x40013c00
 8000e60:	ffe1f7fd 	.word	0xffe1f7fd
 8000e64:	ff1f0efe 	.word	0xff1f0efe

08000e68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_Start+0x1a>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e098      	b.n	8000fb4 <HAL_ADC_Start+0x14c>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fb6e 	bl	800156c <ADC_Enable>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 8087 	bne.w	8000faa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a41      	ldr	r2, [pc, #260]	; (8000fbc <HAL_ADC_Start+0x154>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d105      	bne.n	8000ec6 <HAL_ADC_Start+0x5e>
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <HAL_ADC_Start+0x158>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d115      	bne.n	8000ef2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d026      	beq.n	8000f2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ef0:	e01d      	b.n	8000f2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <HAL_ADC_Start+0x158>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Start+0xaa>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a2b      	ldr	r2, [pc, #172]	; (8000fbc <HAL_ADC_Start+0x154>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10d      	bne.n	8000f2e <HAL_ADC_Start+0xc6>
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <HAL_ADC_Start+0x158>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	f023 0206 	bic.w	r2, r3, #6
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f46:	e002      	b.n	8000f4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f06f 0202 	mvn.w	r2, #2
 8000f5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f6e:	d113      	bne.n	8000f98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f74:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_ADC_Start+0x154>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d105      	bne.n	8000f86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_ADC_Start+0x158>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d108      	bne.n	8000f98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	e00c      	b.n	8000fb2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	e003      	b.n	8000fb2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40012800 	.word	0x40012800
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fda:	f7ff fe2f 	bl	8000c3c <HAL_GetTick>
 8000fde:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f043 0220 	orr.w	r2, r3, #32
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0c8      	b.n	8001198 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d12a      	bne.n	800106a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800101e:	2b00      	cmp	r3, #0
 8001020:	d123      	bne.n	800106a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001022:	e01a      	b.n	800105a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102a:	d016      	beq.n	800105a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <HAL_ADC_PollForConversion+0x7e>
 8001032:	f7ff fe03 	bl	8000c3c <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d20b      	bcs.n	800105a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f043 0204 	orr.w	r2, r3, #4
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e09e      	b.n	8001198 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0dd      	beq.n	8001024 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001068:	e06c      	b.n	8001144 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800106a:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_ADC_PollForConversion+0x1dc>)
 800106c:	681c      	ldr	r4, [r3, #0]
 800106e:	2002      	movs	r0, #2
 8001070:	f004 fc26 	bl	80058c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001074:	4603      	mov	r3, r0
 8001076:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6919      	ldr	r1, [r3, #16]
 8001080:	4b48      	ldr	r3, [pc, #288]	; (80011a4 <HAL_ADC_PollForConversion+0x1e0>)
 8001082:	400b      	ands	r3, r1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d118      	bne.n	80010ba <HAL_ADC_PollForConversion+0xf6>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_ADC_PollForConversion+0x1e4>)
 8001090:	400b      	ands	r3, r1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d111      	bne.n	80010ba <HAL_ADC_PollForConversion+0xf6>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6919      	ldr	r1, [r3, #16]
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <HAL_ADC_PollForConversion+0x1e8>)
 800109e:	400b      	ands	r3, r1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d108      	bne.n	80010b6 <HAL_ADC_PollForConversion+0xf2>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68d9      	ldr	r1, [r3, #12]
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_ADC_PollForConversion+0x1ec>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_PollForConversion+0xf2>
 80010b2:	2314      	movs	r3, #20
 80010b4:	e020      	b.n	80010f8 <HAL_ADC_PollForConversion+0x134>
 80010b6:	2329      	movs	r3, #41	; 0x29
 80010b8:	e01e      	b.n	80010f8 <HAL_ADC_PollForConversion+0x134>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6919      	ldr	r1, [r3, #16]
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_ADC_PollForConversion+0x1e8>)
 80010c2:	400b      	ands	r3, r1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x112>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_ADC_PollForConversion+0x1ec>)
 80010d0:	400b      	ands	r3, r1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <HAL_ADC_PollForConversion+0x12e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6919      	ldr	r1, [r3, #16]
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_ADC_PollForConversion+0x1f0>)
 80010de:	400b      	ands	r3, r1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <HAL_ADC_PollForConversion+0x132>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68d9      	ldr	r1, [r3, #12]
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_ADC_PollForConversion+0x1f0>)
 80010ec:	400b      	ands	r3, r1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_PollForConversion+0x132>
 80010f2:	2354      	movs	r3, #84	; 0x54
 80010f4:	e000      	b.n	80010f8 <HAL_ADC_PollForConversion+0x134>
 80010f6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010fe:	e01d      	b.n	800113c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001106:	d016      	beq.n	8001136 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_ADC_PollForConversion+0x15a>
 800110e:	f7ff fd95 	bl	8000c3c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d20b      	bcs.n	8001136 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f043 0204 	orr.w	r2, r3, #4
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e030      	b.n	8001198 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8dd      	bhi.n	8001100 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0212 	mvn.w	r2, #18
 800114c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001164:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001168:	d115      	bne.n	8001196 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	24924924 	.word	0x24924924
 80011a8:	00924924 	.word	0x00924924
 80011ac:	12492492 	.word	0x12492492
 80011b0:	00492492 	.word	0x00492492
 80011b4:	00249249 	.word	0x00249249

080011b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	d140      	bne.n	8001268 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d139      	bne.n	8001268 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d105      	bne.n	800120c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001216:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800121a:	d11d      	bne.n	8001258 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001220:	2b00      	cmp	r3, #0
 8001222:	d119      	bne.n	8001258 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0220 	bic.w	r2, r2, #32
 8001232:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f87c 	bl	8001356 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0212 	mvn.w	r2, #18
 8001266:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	2b80      	cmp	r3, #128	; 0x80
 8001274:	d14f      	bne.n	8001316 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b04      	cmp	r3, #4
 8001282:	d148      	bne.n	8001316 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80012a6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80012aa:	d012      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d125      	bne.n	8001306 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012c8:	d11d      	bne.n	8001306 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d119      	bne.n	8001306 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f9bc 	bl	8001684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f06f 020c 	mvn.w	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	2b40      	cmp	r3, #64	; 0x40
 8001322:	d114      	bne.n	800134e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10d      	bne.n	800134e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f812 	bl	8001368 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f06f 0201 	mvn.w	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x20>
 8001398:	2302      	movs	r3, #2
 800139a:	e0dc      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1da>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d81c      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b05      	subs	r3, #5
 80013be:	221f      	movs	r2, #31
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4019      	ands	r1, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b05      	subs	r3, #5
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
 80013e4:	e03c      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d81c      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	; 0x23
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b23      	subs	r3, #35	; 0x23
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
 8001426:	e01b      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b41      	subs	r3, #65	; 0x41
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	; 0x41
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d91c      	bls.n	80014a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	3b1e      	subs	r3, #30
 800147a:	2207      	movs	r2, #7
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	4019      	ands	r1, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6898      	ldr	r0, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3b1e      	subs	r3, #30
 8001494:	fa00 f203 	lsl.w	r2, r0, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e019      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4019      	ands	r1, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d132      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d125      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d126      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800150c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d11a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_ADC_ConfigChannel+0x1e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_ADC_ConfigChannel+0x1ec>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_ConfigChannel+0x1b2>
 800153a:	e007      	b.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40012400 	.word	0x40012400
 8001564:	20000000 	.word	0x20000000
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d039      	beq.n	80015fe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <ADC_Enable+0x9c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <ADC_Enable+0xa0>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a8:	e002      	b.n	80015b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b6:	f7ff fb41 	bl	8000c3c <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	e018      	b.n	80015f0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015be:	f7ff fb3d 	bl	8000c3c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d911      	bls.n	80015f0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f043 0210 	orr.w	r2, r3, #16
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e007      	b.n	8001600 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d1df      	bne.n	80015be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d127      	bne.n	800167a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163a:	f7ff faff 	bl	8000c3c <HAL_GetTick>
 800163e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001640:	e014      	b.n	800166c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001642:	f7ff fafb 	bl	8000c3c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d90d      	bls.n	800166c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e007      	b.n	800167c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d0e3      	beq.n	8001642 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
	...

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4906      	ldr	r1, [pc, #24]	; (8001730 <__NVIC_EnableIRQ+0x34>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff90 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff2d 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff42 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff90 	bl	8001788 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5f 	bl	8001734 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff35 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa2 	bl	80017ec <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e059      	b.n	800197e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_DMA_Init+0xd4>)
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d80f      	bhi.n	80018f6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_DMA_Init+0xd8>)
 80018de:	4413      	add	r3, r2
 80018e0:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <HAL_DMA_Init+0xdc>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	009a      	lsls	r2, r3, #2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_DMA_Init+0xe0>)
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018f4:	e00e      	b.n	8001914 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_DMA_Init+0xe4>)
 80018fe:	4413      	add	r3, r2
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_DMA_Init+0xdc>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	009a      	lsls	r2, r3, #2
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_DMA_Init+0xe8>)
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800192a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800192e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40020407 	.word	0x40020407
 800198c:	bffdfff8 	.word	0xbffdfff8
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	40020000 	.word	0x40020000
 8001998:	bffdfbf8 	.word	0xbffdfbf8
 800199c:	40020400 	.word	0x40020400

080019a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d005      	beq.n	80019c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2204      	movs	r2, #4
 80019ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e0d6      	b.n	8001b70 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 020e 	bic.w	r2, r2, #14
 80019d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <HAL_DMA_Abort_IT+0x1dc>)
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d958      	bls.n	8001aa0 <HAL_DMA_Abort_IT+0x100>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a63      	ldr	r2, [pc, #396]	; (8001b80 <HAL_DMA_Abort_IT+0x1e0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d04f      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xf8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a61      	ldr	r2, [pc, #388]	; (8001b84 <HAL_DMA_Abort_IT+0x1e4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d048      	beq.n	8001a94 <HAL_DMA_Abort_IT+0xf4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a60      	ldr	r2, [pc, #384]	; (8001b88 <HAL_DMA_Abort_IT+0x1e8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d040      	beq.n	8001a8e <HAL_DMA_Abort_IT+0xee>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_DMA_Abort_IT+0x1ec>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d038      	beq.n	8001a88 <HAL_DMA_Abort_IT+0xe8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <HAL_DMA_Abort_IT+0x1f0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d030      	beq.n	8001a82 <HAL_DMA_Abort_IT+0xe2>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_DMA_Abort_IT+0x1f4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d028      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xdc>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a53      	ldr	r2, [pc, #332]	; (8001b7c <HAL_DMA_Abort_IT+0x1dc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d020      	beq.n	8001a76 <HAL_DMA_Abort_IT+0xd6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a57      	ldr	r2, [pc, #348]	; (8001b98 <HAL_DMA_Abort_IT+0x1f8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_DMA_Abort_IT+0xd2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a56      	ldr	r2, [pc, #344]	; (8001b9c <HAL_DMA_Abort_IT+0x1fc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d012      	beq.n	8001a6e <HAL_DMA_Abort_IT+0xce>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a54      	ldr	r2, [pc, #336]	; (8001ba0 <HAL_DMA_Abort_IT+0x200>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00a      	beq.n	8001a68 <HAL_DMA_Abort_IT+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a53      	ldr	r2, [pc, #332]	; (8001ba4 <HAL_DMA_Abort_IT+0x204>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d102      	bne.n	8001a62 <HAL_DMA_Abort_IT+0xc2>
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	e01b      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a66:	e018      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6c:	e015      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a6e:	2310      	movs	r3, #16
 8001a70:	e013      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e011      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a7a:	e00e      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a80:	e00b      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a86:	e008      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	e005      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	e002      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a94:	2310      	movs	r3, #16
 8001a96:	e000      	b.n	8001a9a <HAL_DMA_Abort_IT+0xfa>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_DMA_Abort_IT+0x208>)
 8001a9c:	6053      	str	r3, [r2, #4]
 8001a9e:	e057      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1b0>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_DMA_Abort_IT+0x1e0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d04f      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x1aa>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <HAL_DMA_Abort_IT+0x1e4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d048      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x1a6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <HAL_DMA_Abort_IT+0x1e8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d040      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x1a0>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <HAL_DMA_Abort_IT+0x1ec>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d038      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x19a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <HAL_DMA_Abort_IT+0x1f0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d030      	beq.n	8001b34 <HAL_DMA_Abort_IT+0x194>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <HAL_DMA_Abort_IT+0x1f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d028      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x18e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_DMA_Abort_IT+0x1dc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d020      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x188>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_DMA_Abort_IT+0x1f8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d019      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x184>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_DMA_Abort_IT+0x1fc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x180>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_DMA_Abort_IT+0x200>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00a      	beq.n	8001b1a <HAL_DMA_Abort_IT+0x17a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <HAL_DMA_Abort_IT+0x204>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d102      	bne.n	8001b14 <HAL_DMA_Abort_IT+0x174>
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	e01b      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	e018      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1e:	e015      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b20:	2310      	movs	r3, #16
 8001b22:	e013      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e011      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	e00e      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b32:	e00b      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b38:	e008      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	e005      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b44:	e002      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b46:	2310      	movs	r3, #16
 8001b48:	e000      	b.n	8001b4c <HAL_DMA_Abort_IT+0x1ac>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_DMA_Abort_IT+0x20c>)
 8001b4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
    } 
  }
  return status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40020080 	.word	0x40020080
 8001b80:	40020008 	.word	0x40020008
 8001b84:	4002001c 	.word	0x4002001c
 8001b88:	40020030 	.word	0x40020030
 8001b8c:	40020044 	.word	0x40020044
 8001b90:	40020058 	.word	0x40020058
 8001b94:	4002006c 	.word	0x4002006c
 8001b98:	40020408 	.word	0x40020408
 8001b9c:	4002041c 	.word	0x4002041c
 8001ba0:	40020430 	.word	0x40020430
 8001ba4:	40020444 	.word	0x40020444
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	2204      	movs	r2, #4
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80d6 	beq.w	8001d86 <HAL_DMA_IRQHandler+0x1d6>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80d0 	beq.w	8001d86 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b9b      	ldr	r3, [pc, #620]	; (8001e78 <HAL_DMA_IRQHandler+0x2c8>)
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d958      	bls.n	8001cc2 <HAL_DMA_IRQHandler+0x112>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a99      	ldr	r2, [pc, #612]	; (8001e7c <HAL_DMA_IRQHandler+0x2cc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04f      	beq.n	8001cba <HAL_DMA_IRQHandler+0x10a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a98      	ldr	r2, [pc, #608]	; (8001e80 <HAL_DMA_IRQHandler+0x2d0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d048      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x106>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a96      	ldr	r2, [pc, #600]	; (8001e84 <HAL_DMA_IRQHandler+0x2d4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d040      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x100>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a95      	ldr	r2, [pc, #596]	; (8001e88 <HAL_DMA_IRQHandler+0x2d8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d038      	beq.n	8001caa <HAL_DMA_IRQHandler+0xfa>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a93      	ldr	r2, [pc, #588]	; (8001e8c <HAL_DMA_IRQHandler+0x2dc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d030      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xf4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a92      	ldr	r2, [pc, #584]	; (8001e90 <HAL_DMA_IRQHandler+0x2e0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d028      	beq.n	8001c9e <HAL_DMA_IRQHandler+0xee>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a89      	ldr	r2, [pc, #548]	; (8001e78 <HAL_DMA_IRQHandler+0x2c8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d020      	beq.n	8001c98 <HAL_DMA_IRQHandler+0xe8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8e      	ldr	r2, [pc, #568]	; (8001e94 <HAL_DMA_IRQHandler+0x2e4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d019      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xe4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a8c      	ldr	r2, [pc, #560]	; (8001e98 <HAL_DMA_IRQHandler+0x2e8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d012      	beq.n	8001c90 <HAL_DMA_IRQHandler+0xe0>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a8b      	ldr	r2, [pc, #556]	; (8001e9c <HAL_DMA_IRQHandler+0x2ec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00a      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xda>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a89      	ldr	r2, [pc, #548]	; (8001ea0 <HAL_DMA_IRQHandler+0x2f0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d102      	bne.n	8001c84 <HAL_DMA_IRQHandler+0xd4>
 8001c7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c82:	e01b      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001c84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c88:	e018      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	e015      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001c90:	2340      	movs	r3, #64	; 0x40
 8001c92:	e013      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e011      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001c98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c9c:	e00e      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	e00b      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001ca4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ca8:	e008      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001caa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cae:	e005      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb4:	e002      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	e000      	b.n	8001cbc <HAL_DMA_IRQHandler+0x10c>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	4a79      	ldr	r2, [pc, #484]	; (8001ea4 <HAL_DMA_IRQHandler+0x2f4>)
 8001cbe:	6053      	str	r3, [r2, #4]
 8001cc0:	e057      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1c2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	; (8001e7c <HAL_DMA_IRQHandler+0x2cc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d04f      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x1bc>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	; (8001e80 <HAL_DMA_IRQHandler+0x2d0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d048      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x1b8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_DMA_IRQHandler+0x2d4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d040      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x1b2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	; (8001e88 <HAL_DMA_IRQHandler+0x2d8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d038      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x1ac>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_DMA_IRQHandler+0x2dc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d030      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x1a6>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_DMA_IRQHandler+0x2e0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d028      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x1a0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5d      	ldr	r2, [pc, #372]	; (8001e78 <HAL_DMA_IRQHandler+0x2c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d020      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x19a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a61      	ldr	r2, [pc, #388]	; (8001e94 <HAL_DMA_IRQHandler+0x2e4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x196>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a60      	ldr	r2, [pc, #384]	; (8001e98 <HAL_DMA_IRQHandler+0x2e8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d012      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x192>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_DMA_IRQHandler+0x2ec>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00a      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x18c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ea0 <HAL_DMA_IRQHandler+0x2f0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d102      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x186>
 8001d30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d34:	e01b      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d3a:	e018      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d40:	e015      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	e013      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e011      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d4e:	e00e      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d54:	e00b      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d5a:	e008      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d60:	e005      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d66:	e002      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_IRQHandler+0x1be>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_DMA_IRQHandler+0x2f8>)
 8001d70:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8136 	beq.w	8001fe8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d84:	e130      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80f8 	beq.w	8001f88 <HAL_DMA_IRQHandler+0x3d8>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80f2 	beq.w	8001f88 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10b      	bne.n	8001dca <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020a 	bic.w	r2, r2, #10
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_DMA_IRQHandler+0x2c8>)
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d973      	bls.n	8001ebe <HAL_DMA_IRQHandler+0x30e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <HAL_DMA_IRQHandler+0x2cc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d06a      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x306>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_DMA_IRQHandler+0x2d0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d063      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x302>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_DMA_IRQHandler+0x2d4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d05b      	beq.n	8001eac <HAL_DMA_IRQHandler+0x2fc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_DMA_IRQHandler+0x2d8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d038      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x2c0>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_DMA_IRQHandler+0x2dc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d030      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x2ba>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_DMA_IRQHandler+0x2e0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d028      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x2b4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_DMA_IRQHandler+0x2c8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d020      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x2ae>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_DMA_IRQHandler+0x2e4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d019      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x2aa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_DMA_IRQHandler+0x2e8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x2a6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_DMA_IRQHandler+0x2ec>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00a      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x2a0>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <HAL_DMA_IRQHandler+0x2f0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_DMA_IRQHandler+0x29a>
 8001e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e48:	e036      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4e:	e033      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e54:	e030      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e56:	2320      	movs	r3, #32
 8001e58:	e02e      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e02c      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	e029      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e68:	e026      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6e:	e023      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e74:	e020      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001e76:	bf00      	nop
 8001e78:	40020080 	.word	0x40020080
 8001e7c:	40020008 	.word	0x40020008
 8001e80:	4002001c 	.word	0x4002001c
 8001e84:	40020030 	.word	0x40020030
 8001e88:	40020044 	.word	0x40020044
 8001e8c:	40020058 	.word	0x40020058
 8001e90:	4002006c 	.word	0x4002006c
 8001e94:	40020408 	.word	0x40020408
 8001e98:	4002041c 	.word	0x4002041c
 8001e9c:	40020430 	.word	0x40020430
 8001ea0:	40020444 	.word	0x40020444
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb0:	e002      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e000      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x308>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	4a4e      	ldr	r2, [pc, #312]	; (8001ff4 <HAL_DMA_IRQHandler+0x444>)
 8001eba:	6053      	str	r3, [r2, #4]
 8001ebc:	e057      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3be>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_DMA_IRQHandler+0x448>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d04f      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x3b8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_DMA_IRQHandler+0x44c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d048      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x3b4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a4a      	ldr	r2, [pc, #296]	; (8002000 <HAL_DMA_IRQHandler+0x450>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d040      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x3ae>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_DMA_IRQHandler+0x454>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d038      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x3a8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_DMA_IRQHandler+0x458>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d030      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x3a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_DMA_IRQHandler+0x45c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d028      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x39c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a44      	ldr	r2, [pc, #272]	; (8002010 <HAL_DMA_IRQHandler+0x460>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d020      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x396>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <HAL_DMA_IRQHandler+0x464>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x392>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a41      	ldr	r2, [pc, #260]	; (8002018 <HAL_DMA_IRQHandler+0x468>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d012      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x38e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3f      	ldr	r2, [pc, #252]	; (800201c <HAL_DMA_IRQHandler+0x46c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00a      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x388>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <HAL_DMA_IRQHandler+0x470>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d102      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x382>
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	e01b      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f36:	e018      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	e015      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e013      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e011      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	e00e      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f50:	e00b      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f56:	e008      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5c:	e005      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	e002      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f64:	2320      	movs	r3, #32
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_IRQHandler+0x3ba>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_DMA_IRQHandler+0x474>)
 8001f6c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d034      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f86:	e02f      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d028      	beq.n	8001fea <HAL_DMA_IRQHandler+0x43a>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d023      	beq.n	8001fea <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 020e 	bic.w	r2, r2, #14
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
    }
  }
  return;
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
}
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020008 	.word	0x40020008
 8001ffc:	4002001c 	.word	0x4002001c
 8002000:	40020030 	.word	0x40020030
 8002004:	40020044 	.word	0x40020044
 8002008:	40020058 	.word	0x40020058
 800200c:	4002006c 	.word	0x4002006c
 8002010:	40020080 	.word	0x40020080
 8002014:	40020408 	.word	0x40020408
 8002018:	4002041c 	.word	0x4002041c
 800201c:	40020430 	.word	0x40020430
 8002020:	40020444 	.word	0x40020444
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b08b      	sub	sp, #44	; 0x2c
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002052:	e133      	b.n	80022bc <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002054:	2201      	movs	r2, #1
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8122 	bne.w	80022b6 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b12      	cmp	r3, #18
 8002078:	d034      	beq.n	80020e4 <HAL_GPIO_Init+0xa4>
 800207a:	2b12      	cmp	r3, #18
 800207c:	d80d      	bhi.n	800209a <HAL_GPIO_Init+0x5a>
 800207e:	2b02      	cmp	r3, #2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x9a>
 8002082:	2b02      	cmp	r3, #2
 8002084:	d804      	bhi.n	8002090 <HAL_GPIO_Init+0x50>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d031      	beq.n	80020ee <HAL_GPIO_Init+0xae>
 800208a:	2b01      	cmp	r3, #1
 800208c:	d01c      	beq.n	80020c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208e:	e048      	b.n	8002122 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002090:	2b03      	cmp	r3, #3
 8002092:	d043      	beq.n	800211c <HAL_GPIO_Init+0xdc>
 8002094:	2b11      	cmp	r3, #17
 8002096:	d01b      	beq.n	80020d0 <HAL_GPIO_Init+0x90>
          break;
 8002098:	e043      	b.n	8002122 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800209a:	4a8f      	ldr	r2, [pc, #572]	; (80022d8 <HAL_GPIO_Init+0x298>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d026      	beq.n	80020ee <HAL_GPIO_Init+0xae>
 80020a0:	4a8d      	ldr	r2, [pc, #564]	; (80022d8 <HAL_GPIO_Init+0x298>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d806      	bhi.n	80020b4 <HAL_GPIO_Init+0x74>
 80020a6:	4a8d      	ldr	r2, [pc, #564]	; (80022dc <HAL_GPIO_Init+0x29c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d020      	beq.n	80020ee <HAL_GPIO_Init+0xae>
 80020ac:	4a8c      	ldr	r2, [pc, #560]	; (80022e0 <HAL_GPIO_Init+0x2a0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01d      	beq.n	80020ee <HAL_GPIO_Init+0xae>
          break;
 80020b2:	e036      	b.n	8002122 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020b4:	4a8b      	ldr	r2, [pc, #556]	; (80022e4 <HAL_GPIO_Init+0x2a4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0xae>
 80020ba:	4a8b      	ldr	r2, [pc, #556]	; (80022e8 <HAL_GPIO_Init+0x2a8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d016      	beq.n	80020ee <HAL_GPIO_Init+0xae>
 80020c0:	4a8a      	ldr	r2, [pc, #552]	; (80022ec <HAL_GPIO_Init+0x2ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0xae>
          break;
 80020c6:	e02c      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	623b      	str	r3, [r7, #32]
          break;
 80020ce:	e028      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	3304      	adds	r3, #4
 80020d6:	623b      	str	r3, [r7, #32]
          break;
 80020d8:	e023      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	3308      	adds	r3, #8
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e01e      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	330c      	adds	r3, #12
 80020ea:	623b      	str	r3, [r7, #32]
          break;
 80020ec:	e019      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020f6:	2304      	movs	r3, #4
 80020f8:	623b      	str	r3, [r7, #32]
          break;
 80020fa:	e012      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002104:	2308      	movs	r3, #8
 8002106:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	611a      	str	r2, [r3, #16]
          break;
 800210e:	e008      	b.n	8002122 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002110:	2308      	movs	r3, #8
 8002112:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	615a      	str	r2, [r3, #20]
          break;
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
          break;
 8002120:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2bff      	cmp	r3, #255	; 0xff
 8002126:	d801      	bhi.n	800212c <HAL_GPIO_Init+0xec>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	e001      	b.n	8002130 <HAL_GPIO_Init+0xf0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d802      	bhi.n	800213e <HAL_GPIO_Init+0xfe>
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	e002      	b.n	8002144 <HAL_GPIO_Init+0x104>
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	3b08      	subs	r3, #8
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	210f      	movs	r1, #15
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	6a39      	ldr	r1, [r7, #32]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	431a      	orrs	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a2 	beq.w	80022b6 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002172:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <HAL_GPIO_Init+0x2b0>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	4a5e      	ldr	r2, [pc, #376]	; (80022f0 <HAL_GPIO_Init+0x2b0>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6193      	str	r3, [r2, #24]
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_GPIO_Init+0x2b0>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800218a:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_GPIO_Init+0x2b4>)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01f      	beq.n	80021f6 <HAL_GPIO_Init+0x1b6>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_GPIO_Init+0x2bc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x1b2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x2c0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x1ae>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_GPIO_Init+0x2c4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x1aa>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x2c8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x1a6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x2cc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x1a2>
 80021de:	2305      	movs	r3, #5
 80021e0:	e00a      	b.n	80021f8 <HAL_GPIO_Init+0x1b8>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x1b8>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x1b8>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x1b8>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x1b8>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x1b8>
 80021f6:	2300      	movs	r3, #0
 80021f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	4093      	lsls	r3, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002208:	493a      	ldr	r1, [pc, #232]	; (80022f4 <HAL_GPIO_Init+0x2b4>)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	493a      	ldr	r1, [pc, #232]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
 800222e:	e006      	b.n	800223e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002230:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	43db      	mvns	r3, r3
 8002238:	4935      	ldr	r1, [pc, #212]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800223a:	4013      	ands	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4930      	ldr	r1, [pc, #192]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
 8002256:	e006      	b.n	8002266 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	43db      	mvns	r3, r3
 8002260:	492b      	ldr	r1, [pc, #172]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002262:	4013      	ands	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	4926      	ldr	r1, [pc, #152]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
 800227e:	e006      	b.n	800228e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	43db      	mvns	r3, r3
 8002288:	4921      	ldr	r1, [pc, #132]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800228a:	4013      	ands	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	491c      	ldr	r1, [pc, #112]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60cb      	str	r3, [r1, #12]
 80022a6:	e006      	b.n	80022b6 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	4917      	ldr	r1, [pc, #92]	; (8002310 <HAL_GPIO_Init+0x2d0>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3301      	adds	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f47f aec4 	bne.w	8002054 <HAL_GPIO_Init+0x14>
  }
}
 80022cc:	bf00      	nop
 80022ce:	372c      	adds	r7, #44	; 0x2c
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	10210000 	.word	0x10210000
 80022dc:	10110000 	.word	0x10110000
 80022e0:	10120000 	.word	0x10120000
 80022e4:	10310000 	.word	0x10310000
 80022e8:	10320000 	.word	0x10320000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40010c00 	.word	0x40010c00
 8002300:	40011000 	.word	0x40011000
 8002304:	40011400 	.word	0x40011400
 8002308:	40011800 	.word	0x40011800
 800230c:	40011c00 	.word	0x40011c00
 8002310:	40010400 	.word	0x40010400

08002314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e001      	b.n	8002336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	807b      	strh	r3, [r7, #2]
 800234e:	4613      	mov	r3, r2
 8002350:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002352:	787b      	ldrb	r3, [r7, #1]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800235e:	e003      	b.n	8002368 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	041a      	lsls	r2, r3, #16
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e11f      	b.n	80025c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe f8c2 	bl	8000524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d8:	f003 f976 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a7b      	ldr	r2, [pc, #492]	; (80025d0 <HAL_I2C_Init+0x25c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d807      	bhi.n	80023f8 <HAL_I2C_Init+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_I2C_Init+0x260>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e006      	b.n	8002406 <HAL_I2C_Init+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a77      	ldr	r2, [pc, #476]	; (80025d8 <HAL_I2C_Init+0x264>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0db      	b.n	80025c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a72      	ldr	r2, [pc, #456]	; (80025dc <HAL_I2C_Init+0x268>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a64      	ldr	r2, [pc, #400]	; (80025d0 <HAL_I2C_Init+0x25c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d802      	bhi.n	8002448 <HAL_I2C_Init+0xd4>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	e009      	b.n	800245c <HAL_I2C_Init+0xe8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a63      	ldr	r2, [pc, #396]	; (80025e0 <HAL_I2C_Init+0x26c>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800246e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4956      	ldr	r1, [pc, #344]	; (80025d0 <HAL_I2C_Init+0x25c>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d80d      	bhi.n	8002498 <HAL_I2C_Init+0x124>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fbb1 f3f3 	udiv	r3, r1, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	bf38      	it	cc
 8002494:	2304      	movcc	r3, #4
 8002496:	e04f      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <HAL_I2C_Init+0x150>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e012      	b.n	80024ea <HAL_I2C_Init+0x176>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x17e>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e022      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <HAL_I2C_Init+0x1a4>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e58      	subs	r0, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	440b      	add	r3, r1
 8002508:	fbb0 f3f3 	udiv	r3, r0, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002516:	e00f      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	6809      	ldr	r1, [r1, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6911      	ldr	r1, [r2, #16]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	000186a0 	.word	0x000186a0
 80025d4:	001e847f 	.word	0x001e847f
 80025d8:	003d08ff 	.word	0x003d08ff
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	10624dd3 	.word	0x10624dd3

080025e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fe:	f7fe fb1d 	bl	8000c3c <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 80d9 	bne.w	80027c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2319      	movs	r3, #25
 8002618:	2201      	movs	r2, #1
 800261a:	496d      	ldr	r1, [pc, #436]	; (80027d0 <HAL_I2C_Mem_Write+0x1ec>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f002 fa55 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	e0cc      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2C_Mem_Write+0x56>
 8002636:	2302      	movs	r3, #2
 8002638:	e0c5      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d007      	beq.n	8002660 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	; 0x21
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_I2C_Mem_Write+0x1f0>)
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a2:	88f8      	ldrh	r0, [r7, #6]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4603      	mov	r3, r0
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f001 ffe4 	bl	8004680 <I2C_RequestMemoryWrite>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d052      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e081      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f002 fad6 	bl	8004c78 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_I2C_Mem_Write+0x180>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d017      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1aa      	bne.n	80026c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f002 fac2 	bl	8004cfa <I2C_WaitOnBTFFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e016      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000

080027d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f6:	f7fe fa21 	bl	8000c3c <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	f040 823d 	bne.w	8002c84 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2319      	movs	r3, #25
 8002810:	2201      	movs	r2, #1
 8002812:	4981      	ldr	r1, [pc, #516]	; (8002a18 <HAL_I2C_Mem_Read+0x240>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f002 f959 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
 8002822:	e230      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Mem_Read+0x5a>
 800282e:	2302      	movs	r3, #2
 8002830:	e229      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d007      	beq.n	8002858 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2222      	movs	r2, #34	; 0x22
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a61      	ldr	r2, [pc, #388]	; (8002a1c <HAL_I2C_Mem_Read+0x244>)
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289a:	88f8      	ldrh	r0, [r7, #6]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	8979      	ldrh	r1, [r7, #10]
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4603      	mov	r3, r0
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f001 ff7e 	bl	80047ac <I2C_RequestMemoryRead>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1e5      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d113      	bne.n	80028ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e1b9      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d11d      	bne.n	800292e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002902:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800292a:	b662      	cpsie	i
 800292c:	e197      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	2b02      	cmp	r3, #2
 8002934:	d11d      	bne.n	8002972 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002944:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002946:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800296e:	b662      	cpsie	i
 8002970:	e175      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002980:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002998:	e161      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	2b03      	cmp	r3, #3
 80029a0:	f200 811a 	bhi.w	8002bd8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d123      	bne.n	80029f4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f002 fa15 	bl	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e162      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029f2:	e134      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d150      	bne.n	8002a9e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	2200      	movs	r2, #0
 8002a04:	4906      	ldr	r1, [pc, #24]	; (8002a20 <HAL_I2C_Mem_Read+0x248>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f002 f860 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e137      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
 8002a16:	bf00      	nop
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000
 8002a20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a24:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a68:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a9c:	e0df      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	497a      	ldr	r1, [pc, #488]	; (8002c90 <HAL_I2C_Mem_Read+0x4b8>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f002 f80f 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0e6      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002afc:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_I2C_Mem_Read+0x4bc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <HAL_I2C_Mem_Read+0x4c0>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0a1a      	lsrs	r2, r3, #8
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00da      	lsls	r2, r3, #3
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d117      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b44:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e099      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d1da      	bne.n	8002b16 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd6:	e042      	b.n	8002c5e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f002 f8ff 	bl	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04c      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d118      	bne.n	8002c5e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f ae99 	bne.w	800299a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3728      	adds	r7, #40	; 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	00010004 	.word	0x00010004
 8002c94:	20000000 	.word	0x20000000
 8002c98:	14f8b589 	.word	0x14f8b589

08002c9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7fd ffc6 	bl	8000c3c <HAL_GetTick>
 8002cb0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f040 8111 	bne.w	8002ee6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2319      	movs	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4988      	ldr	r1, [pc, #544]	; (8002ef0 <HAL_I2C_IsDeviceReady+0x254>)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f001 fefc 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e104      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_I2C_IsDeviceReady+0x50>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0fd      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d007      	beq.n	8002d12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2224      	movs	r2, #36	; 0x24
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a70      	ldr	r2, [pc, #448]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x258>)
 8002d34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f001 feba 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6c:	d103      	bne.n	8002d76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0b6      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd ff57 	bl	8000c3c <HAL_GetTick>
 8002d8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dbe:	e025      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7fd ff3c 	bl	8000c3c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <HAL_I2C_IsDeviceReady+0x13a>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	22a0      	movs	r2, #160	; 0xa0
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2ba0      	cmp	r3, #160	; 0xa0
 8002e16:	d005      	beq.n	8002e24 <HAL_I2C_IsDeviceReady+0x188>
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_I2C_IsDeviceReady+0x188>
 8002e1e:	7dbb      	ldrb	r3, [r7, #22]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0cd      	beq.n	8002dc0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d129      	bne.n	8002e8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2319      	movs	r3, #25
 8002e66:	2201      	movs	r2, #1
 8002e68:	4921      	ldr	r1, [pc, #132]	; (8002ef0 <HAL_I2C_IsDeviceReady+0x254>)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f001 fe2e 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e036      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e02c      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2319      	movs	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	490f      	ldr	r1, [pc, #60]	; (8002ef0 <HAL_I2C_IsDeviceReady+0x254>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f001 fe0a 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e012      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	f4ff af32 	bcc.w	8002d36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d003      	beq.n	8002f30 <HAL_I2C_EV_IRQHandler+0x38>
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	f040 80bd 	bne.w	80030aa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f50:	d003      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x62>
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f58:	d101      	bne.n	8002f5e <HAL_I2C_EV_IRQHandler+0x66>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_I2C_EV_IRQHandler+0x68>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f000 812e 	beq.w	80031c2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00c      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0x92>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	0a5b      	lsrs	r3, r3, #9
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f001 ffb3 	bl	8004ee8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fd60 	bl	8003a48 <I2C_Master_SB>
 8002f88:	e08e      	b.n	80030a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	08db      	lsrs	r3, r3, #3
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_I2C_EV_IRQHandler+0xb2>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	0a5b      	lsrs	r3, r3, #9
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fdd5 	bl	8003b52 <I2C_Master_ADD10>
 8002fa8:	e07e      	b.n	80030a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_I2C_EV_IRQHandler+0xd2>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	0a5b      	lsrs	r3, r3, #9
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fdee 	bl	8003ba4 <I2C_Master_ADDR>
 8002fc8:	e06e      	b.n	80030a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d037      	beq.n	8003046 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe4:	f000 80ef 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	09db      	lsrs	r3, r3, #7
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x11c>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9ed 	bl	80033ec <I2C_MasterTransmit_TXE>
 8003012:	e049      	b.n	80030a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80d2 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	0a5b      	lsrs	r3, r3, #9
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80cb 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b10      	cmp	r3, #16
 8003034:	d103      	bne.n	800303e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa74 	bl	8003524 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303c:	e0c3      	b.n	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fad8 	bl	80035f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003044:	e0bf      	b.n	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003054:	f000 80b7 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00f      	beq.n	8003084 <HAL_I2C_EV_IRQHandler+0x18c>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	0a9b      	lsrs	r3, r3, #10
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <HAL_I2C_EV_IRQHandler+0x18c>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fb48 	bl	8003712 <I2C_MasterReceive_RXNE>
 8003082:	e011      	b.n	80030a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 809a 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8093 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fbe7 	bl	8003874 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a6:	e08e      	b.n	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80030a8:	e08d      	b.n	80031c6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e007      	b.n	80030cc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_I2C_EV_IRQHandler+0x206>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	0a5b      	lsrs	r3, r3, #9
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030f4:	69b9      	ldr	r1, [r7, #24]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 ffab 	bl	8004052 <I2C_Slave_ADDR>
 80030fc:	e066      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_I2C_EV_IRQHandler+0x226>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	0a5b      	lsrs	r3, r3, #9
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 ffe0 	bl	80040dc <I2C_Slave_STOPF>
 800311c:	e056      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800311e:	7bbb      	ldrb	r3, [r7, #14]
 8003120:	2b21      	cmp	r3, #33	; 0x21
 8003122:	d002      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0x232>
 8003124:	7bbb      	ldrb	r3, [r7, #14]
 8003126:	2b29      	cmp	r3, #41	; 0x29
 8003128:	d125      	bne.n	8003176 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	09db      	lsrs	r3, r3, #7
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00f      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0x25e>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	0a9b      	lsrs	r3, r3, #10
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0x25e>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fec3 	bl	8003eda <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003154:	e039      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d033      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0x2d2>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	0a5b      	lsrs	r3, r3, #9
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02d      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fef0 	bl	8003f54 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003174:	e029      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00f      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	0a9b      	lsrs	r3, r3, #10
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fefa 	bl	8003f94 <I2C_SlaveReceive_RXNE>
 80031a0:	e014      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	0a5b      	lsrs	r3, r3, #9
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 ff28 	bl	8004010 <I2C_SlaveReceive_BTF>
 80031c0:	e004      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08a      	sub	sp, #40	; 0x28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_I2C_ER_IRQHandler+0x5e>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d010      	beq.n	8003230 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800321e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	0a5b      	lsrs	r3, r3, #9
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <HAL_I2C_ER_IRQHandler+0x88>
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f043 0302 	orr.w	r3, r3, #2
 800324e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003258:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	0a9b      	lsrs	r3, r3, #10
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03f      	beq.n	80032e6 <HAL_I2C_ER_IRQHandler+0x114>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d039      	beq.n	80032e6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003272:	7efb      	ldrb	r3, [r7, #27]
 8003274:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800328c:	7ebb      	ldrb	r3, [r7, #26]
 800328e:	2b20      	cmp	r3, #32
 8003290:	d112      	bne.n	80032b8 <HAL_I2C_ER_IRQHandler+0xe6>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10f      	bne.n	80032b8 <HAL_I2C_ER_IRQHandler+0xe6>
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	2b21      	cmp	r3, #33	; 0x21
 800329c:	d008      	beq.n	80032b0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b29      	cmp	r3, #41	; 0x29
 80032a2:	d005      	beq.n	80032b0 <HAL_I2C_ER_IRQHandler+0xde>
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	2b28      	cmp	r3, #40	; 0x28
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b21      	cmp	r3, #33	; 0x21
 80032ae:	d103      	bne.n	80032b8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 f843 	bl	800433c <I2C_Slave_AF>
 80032b6:	e016      	b.n	80032e6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032ca:	7efb      	ldrb	r3, [r7, #27]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d002      	beq.n	80032d6 <HAL_I2C_ER_IRQHandler+0x104>
 80032d0:	7efb      	ldrb	r3, [r7, #27]
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d107      	bne.n	80032e6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	0adb      	lsrs	r3, r3, #11
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00e      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0x13e>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800330e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 f87a 	bl	800441c <I2C_ITError>
  }
}
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
 8003384:	4613      	mov	r3, r2
 8003386:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003402:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d150      	bne.n	80034b4 <I2C_MasterTransmit_TXE+0xc8>
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b21      	cmp	r3, #33	; 0x21
 8003416:	d14d      	bne.n	80034b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d01d      	beq.n	800345a <I2C_MasterTransmit_TXE+0x6e>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b20      	cmp	r3, #32
 8003422:	d01a      	beq.n	800345a <I2C_MasterTransmit_TXE+0x6e>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800342a:	d016      	beq.n	800345a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800343a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2211      	movs	r2, #17
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff6c 	bl	8003330 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003458:	e060      	b.n	800351c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003468:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d107      	bne.n	80034a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff81 	bl	80033a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034a2:	e03b      	b.n	800351c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff3f 	bl	8003330 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034b2:	e033      	b.n	800351c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b21      	cmp	r3, #33	; 0x21
 80034b8:	d005      	beq.n	80034c6 <I2C_MasterTransmit_TXE+0xda>
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d12d      	bne.n	800351c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b22      	cmp	r3, #34	; 0x22
 80034c4:	d12a      	bne.n	800351c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034e0:	e01c      	b.n	800351c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d103      	bne.n	80034f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f880 	bl	80035f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80034f4:	e012      	b.n	800351c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800351a:	e7ff      	b.n	800351c <I2C_MasterTransmit_TXE+0x130>
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b21      	cmp	r3, #33	; 0x21
 800353c:	d156      	bne.n	80035ec <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d012      	beq.n	800356e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800356c:	e03e      	b.n	80035ec <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d01d      	beq.n	80035b0 <I2C_MasterTransmit_BTF+0x8c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b20      	cmp	r3, #32
 8003578:	d01a      	beq.n	80035b0 <I2C_MasterTransmit_BTF+0x8c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003580:	d016      	beq.n	80035b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003590:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2211      	movs	r2, #17
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fec1 	bl	8003330 <HAL_I2C_MasterTxCpltCallback>
}
 80035ae:	e01d      	b.n	80035ec <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fea2 	bl	8003330 <HAL_I2C_MasterTxCpltCallback>
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11d      	bne.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10b      	bne.n	800362c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	b2da      	uxtb	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800362a:	e06e      	b.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003630:	b29b      	uxth	r3, r3
 8003632:	121b      	asrs	r3, r3, #8
 8003634:	b2da      	uxtb	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003646:	e060      	b.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10b      	bne.n	8003668 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003654:	b2da      	uxtb	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003666:	e050      	b.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	2b02      	cmp	r3, #2
 800366e:	d14c      	bne.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b22      	cmp	r3, #34	; 0x22
 8003674:	d108      	bne.n	8003688 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	e040      	b.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b21      	cmp	r3, #33	; 0x21
 8003696:	d112      	bne.n	80036be <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036bc:	e025      	b.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d120      	bne.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b21      	cmp	r3, #33	; 0x21
 80036cc:	d11d      	bne.n	800370a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036dc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fe4d 	bl	80033a4 <HAL_I2C_MemTxCpltCallback>
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b22      	cmp	r3, #34	; 0x22
 8003724:	f040 80a2 	bne.w	800386c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d921      	bls.n	800377a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b03      	cmp	r3, #3
 8003764:	f040 8082 	bne.w	800386c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003776:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003778:	e078      	b.n	800386c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	2b02      	cmp	r3, #2
 8003780:	d074      	beq.n	800386c <I2C_MasterReceive_RXNE+0x15a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d002      	beq.n	800378e <I2C_MasterReceive_RXNE+0x7c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d16e      	bne.n	800386c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f001 faf4 	bl	8004d7c <I2C_WaitOnSTOPRequestThroughIT>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d142      	bne.n	8003820 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d10a      	bne.n	800380a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fdd7 	bl	80033b6 <HAL_I2C_MemRxCpltCallback>
}
 8003808:	e030      	b.n	800386c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2212      	movs	r2, #18
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fd92 	bl	8003342 <HAL_I2C_MasterRxCpltCallback>
}
 800381e:	e025      	b.n	800386c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800382e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fdae 	bl	80033c8 <HAL_I2C_ErrorCallback>
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b04      	cmp	r3, #4
 800388a:	d11b      	bne.n	80038c4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038c2:	e0bd      	b.n	8003a40 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d129      	bne.n	8003922 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d00a      	beq.n	80038fa <I2C_MasterReceive_BTF+0x86>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d007      	beq.n	80038fa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003920:	e08e      	b.n	8003a40 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d176      	bne.n	8003a1a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <I2C_MasterReceive_BTF+0xc4>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b10      	cmp	r3, #16
 8003936:	d108      	bne.n	800394a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e019      	b.n	800397e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d002      	beq.n	8003956 <I2C_MasterReceive_BTF+0xe2>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d108      	bne.n	8003968 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00a      	b.n	800397e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d007      	beq.n	800397e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d10a      	bne.n	8003a04 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fcda 	bl	80033b6 <HAL_I2C_MemRxCpltCallback>
}
 8003a02:	e01d      	b.n	8003a40 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2212      	movs	r2, #18
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fc95 	bl	8003342 <HAL_I2C_MasterRxCpltCallback>
}
 8003a18:	e012      	b.n	8003a40 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d117      	bne.n	8003a8c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a74:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a76:	e067      	b.n	8003b48 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	611a      	str	r2, [r3, #16]
}
 8003a8a:	e05d      	b.n	8003b48 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a94:	d133      	bne.n	8003afe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b21      	cmp	r3, #33	; 0x21
 8003aa0:	d109      	bne.n	8003ab6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab2:	611a      	str	r2, [r3, #16]
 8003ab4:	e008      	b.n	8003ac8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <I2C_Master_SB+0x92>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d032      	beq.n	8003b48 <I2C_Master_SB+0x100>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02d      	beq.n	8003b48 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afa:	605a      	str	r2, [r3, #4]
}
 8003afc:	e024      	b.n	8003b48 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	11db      	asrs	r3, r3, #7
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f003 0306 	and.w	r3, r3, #6
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f063 030f 	orn	r3, r3, #15
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	611a      	str	r2, [r3, #16]
}
 8003b22:	e011      	b.n	8003b48 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10d      	bne.n	8003b48 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	11db      	asrs	r3, r3, #7
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0306 	and.w	r3, r3, #6
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f063 030e 	orn	r3, r3, #14
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <I2C_Master_ADD10+0x24>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d011      	beq.n	8003b9a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <I2C_Master_ADD10+0x38>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b091      	sub	sp, #68	; 0x44
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b22      	cmp	r3, #34	; 0x22
 8003bcc:	f040 8174 	bne.w	8003eb8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <I2C_Master_ADDR+0x54>
 8003bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d10b      	bne.n	8003bf8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be0:	2300      	movs	r3, #0
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	e16b      	b.n	8003ed0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11d      	bne.n	8003c3c <I2C_Master_ADDR+0x98>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c08:	d118      	bne.n	8003c3c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50
 8003c3a:	e149      	b.n	8003ed0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e120      	b.n	8003eb0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 808a 	bne.w	8003d8e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c80:	d137      	bne.n	8003cf2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c90:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca0:	d113      	bne.n	8003cca <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	e0f2      	b.n	8003eb0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e0de      	b.n	8003eb0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d02e      	beq.n	8003d56 <I2C_Master_ADDR+0x1b2>
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d02b      	beq.n	8003d56 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	2b12      	cmp	r3, #18
 8003d02:	d102      	bne.n	8003d0a <I2C_Master_ADDR+0x166>
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d125      	bne.n	8003d56 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00e      	beq.n	8003d2e <I2C_Master_ADDR+0x18a>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d00b      	beq.n	8003d2e <I2C_Master_ADDR+0x18a>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d008      	beq.n	8003d2e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e007      	b.n	8003d3e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	e0ac      	b.n	8003eb0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e090      	b.n	8003eb0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d158      	bne.n	8003e4a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d021      	beq.n	8003de2 <I2C_Master_ADDR+0x23e>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d01e      	beq.n	8003de2 <I2C_Master_ADDR+0x23e>
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d01b      	beq.n	8003de2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e012      	b.n	8003e08 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d14b      	bne.n	8003eb0 <I2C_Master_ADDR+0x30c>
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e1e:	d00b      	beq.n	8003e38 <I2C_Master_ADDR+0x294>
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d008      	beq.n	8003e38 <I2C_Master_ADDR+0x294>
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d005      	beq.n	8003e38 <I2C_Master_ADDR+0x294>
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d002      	beq.n	8003e38 <I2C_Master_ADDR+0x294>
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d13b      	bne.n	8003eb0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	e032      	b.n	8003eb0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e58:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e68:	d117      	bne.n	8003e9a <I2C_Master_ADDR+0x2f6>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e70:	d00b      	beq.n	8003e8a <I2C_Master_ADDR+0x2e6>
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d008      	beq.n	8003e8a <I2C_Master_ADDR+0x2e6>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d005      	beq.n	8003e8a <I2C_Master_ADDR+0x2e6>
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d002      	beq.n	8003e8a <I2C_Master_ADDR+0x2e6>
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d107      	bne.n	8003e9a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003eb6:	e00b      	b.n	8003ed0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
}
 8003ece:	e7ff      	b.n	8003ed0 <I2C_Master_ADDR+0x32c>
 8003ed0:	bf00      	nop
 8003ed2:	3744      	adds	r7, #68	; 0x44
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d02b      	beq.n	8003f4c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d114      	bne.n	8003f4c <I2C_SlaveTransmit_TXE+0x72>
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b29      	cmp	r3, #41	; 0x29
 8003f26:	d111      	bne.n	8003f4c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2221      	movs	r2, #33	; 0x21
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2228      	movs	r2, #40	; 0x28
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fa04 	bl	8003354 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02c      	beq.n	8004008 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d114      	bne.n	8004008 <I2C_SlaveReceive_RXNE+0x74>
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe2:	d111      	bne.n	8004008 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2222      	movs	r2, #34	; 0x22
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2228      	movs	r2, #40	; 0x28
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff f9af 	bl	8003366 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406c:	2b28      	cmp	r3, #40	; 0x28
 800406e:	d127      	bne.n	80040c0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	09db      	lsrs	r3, r3, #7
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	81bb      	strh	r3, [r7, #12]
 80040a2:	e002      	b.n	80040aa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040b2:	89ba      	ldrh	r2, [r7, #12]
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff f95d 	bl	8003378 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040be:	e008      	b.n	80040d2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0202 	mvn.w	r2, #2
 80040c8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004138:	d172      	bne.n	8004220 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b22      	cmp	r3, #34	; 0x22
 800413e:	d002      	beq.n	8004146 <I2C_Slave_STOPF+0x6a>
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b2a      	cmp	r3, #42	; 0x2a
 8004144:	d135      	bne.n	80041b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004178:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd ff52 	bl	8002028 <HAL_DMA_GetState>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d049      	beq.n	800421e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	4a69      	ldr	r2, [pc, #420]	; (8004334 <I2C_Slave_STOPF+0x258>)
 8004190:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fc02 	bl	80019a0 <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03d      	beq.n	800421e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041b0:	e035      	b.n	800421e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd ff1c 	bl	8002028 <HAL_DMA_GetState>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d014      	beq.n	8004220 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	4a4e      	ldr	r2, [pc, #312]	; (8004334 <I2C_Slave_STOPF+0x258>)
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fbcc 	bl	80019a0 <HAL_DMA_Abort_IT>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
 800421c:	e000      	b.n	8004220 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800421e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03e      	beq.n	80042a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d112      	bne.n	800425e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d112      	bne.n	8004292 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8b3 	bl	800441c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042b6:	e039      	b.n	800432c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b2a      	cmp	r3, #42	; 0x2a
 80042bc:	d109      	bne.n	80042d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2228      	movs	r2, #40	; 0x28
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff f84a 	bl	8003366 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b28      	cmp	r3, #40	; 0x28
 80042dc:	d111      	bne.n	8004302 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <I2C_Slave_STOPF+0x25c>)
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff f849 	bl	8003392 <HAL_I2C_ListenCpltCallback>
}
 8004300:	e014      	b.n	800432c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	2b22      	cmp	r3, #34	; 0x22
 8004308:	d002      	beq.n	8004310 <I2C_Slave_STOPF+0x234>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b22      	cmp	r3, #34	; 0x22
 800430e:	d10d      	bne.n	800432c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff f81d 	bl	8003366 <HAL_I2C_SlaveRxCpltCallback>
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	0800497d 	.word	0x0800497d
 8004338:	ffff0000 	.word	0xffff0000

0800433c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d002      	beq.n	800435e <I2C_Slave_AF+0x22>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b20      	cmp	r3, #32
 800435c:	d129      	bne.n	80043b2 <I2C_Slave_AF+0x76>
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b28      	cmp	r3, #40	; 0x28
 8004362:	d126      	bne.n	80043b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <I2C_Slave_AF+0xdc>)
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004378:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004382:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fff1 	bl	8003392 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043b0:	e02e      	b.n	8004410 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b21      	cmp	r3, #33	; 0x21
 80043b6:	d126      	bne.n	8004406 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <I2C_Slave_AF+0xdc>)
 80043bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2221      	movs	r2, #33	; 0x21
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fe ffa8 	bl	8003354 <HAL_I2C_SlaveTxCpltCallback>
}
 8004404:	e004      	b.n	8004410 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800440e:	615a      	str	r2, [r3, #20]
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	ffff0000 	.word	0xffff0000

0800441c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004432:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004434:	7bbb      	ldrb	r3, [r7, #14]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d002      	beq.n	8004440 <I2C_ITError+0x24>
 800443a:	7bbb      	ldrb	r3, [r7, #14]
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d10a      	bne.n	8004456 <I2C_ITError+0x3a>
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b22      	cmp	r3, #34	; 0x22
 8004444:	d107      	bne.n	8004456 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004454:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800445c:	2b28      	cmp	r3, #40	; 0x28
 800445e:	d107      	bne.n	8004470 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2228      	movs	r2, #40	; 0x28
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800446e:	e015      	b.n	800449c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447e:	d00a      	beq.n	8004496 <I2C_ITError+0x7a>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b60      	cmp	r3, #96	; 0x60
 8004484:	d007      	beq.n	8004496 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d161      	bne.n	8004570 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d020      	beq.n	800450a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	4a6a      	ldr	r2, [pc, #424]	; (8004678 <I2C_ITError+0x25c>)
 80044ce:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd fa63 	bl	80019a0 <HAL_DMA_Abort_IT>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8089 	beq.w	80045f4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004504:	4610      	mov	r0, r2
 8004506:	4798      	blx	r3
 8004508:	e074      	b.n	80045f4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	4a5a      	ldr	r2, [pc, #360]	; (8004678 <I2C_ITError+0x25c>)
 8004510:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fa42 	bl	80019a0 <HAL_DMA_Abort_IT>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d068      	beq.n	80045f4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d10b      	bne.n	8004548 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800456a:	4610      	mov	r0, r2
 800456c:	4798      	blx	r3
 800456e:	e041      	b.n	80045f4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d125      	bne.n	80045c8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d10b      	bne.n	80045b0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fe ff0a 	bl	80033da <HAL_I2C_AbortCpltCallback>
 80045c6:	e015      	b.n	80045f4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d10b      	bne.n	80045ee <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fe feea 	bl	80033c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10e      	bne.n	8004622 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d113      	bne.n	800466e <I2C_ITError+0x252>
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b28      	cmp	r3, #40	; 0x28
 800464a:	d110      	bne.n	800466e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a0b      	ldr	r2, [pc, #44]	; (800467c <I2C_ITError+0x260>)
 8004650:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fe fe92 	bl	8003392 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0800497d 	.word	0x0800497d
 800467c:	ffff0000 	.word	0xffff0000

08004680 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	461a      	mov	r2, r3
 800468e:	4603      	mov	r3, r0
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	460b      	mov	r3, r1
 8004694:	813b      	strh	r3, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fa08 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d0:	d103      	bne.n	80046da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e05f      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	492d      	ldr	r1, [pc, #180]	; (80047a8 <I2C_RequestMemoryWrite+0x128>)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fa40 	bl	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e04c      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	6a39      	ldr	r1, [r7, #32]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 faaa 	bl	8004c78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b04      	cmp	r3, #4
 8004730:	d107      	bne.n	8004742 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e02b      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e021      	b.n	800479c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b29b      	uxth	r3, r3
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	6a39      	ldr	r1, [r7, #32]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fa84 	bl	8004c78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b04      	cmp	r3, #4
 800477c:	d107      	bne.n	800478e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e005      	b.n	800479e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004792:	893b      	ldrh	r3, [r7, #8]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	00010002 	.word	0x00010002

080047ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	817b      	strh	r3, [r7, #10]
 80047be:	460b      	mov	r3, r1
 80047c0:	813b      	strh	r3, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f96a 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480c:	d103      	bne.n	8004816 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0aa      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	4952      	ldr	r1, [pc, #328]	; (8004978 <I2C_RequestMemoryRead+0x1cc>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f9a2 	bl	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e097      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	6a39      	ldr	r1, [r7, #32]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fa0c 	bl	8004c78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b04      	cmp	r3, #4
 800486c:	d107      	bne.n	800487e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e076      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d105      	bne.n	8004894 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	e021      	b.n	80048d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	b29b      	uxth	r3, r3
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f9e6 	bl	8004c78 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d107      	bne.n	80048ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e050      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ce:	893b      	ldrh	r3, [r7, #8]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	6a39      	ldr	r1, [r7, #32]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f9cb 	bl	8004c78 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d107      	bne.n	8004900 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e035      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004912:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2200      	movs	r2, #0
 800491c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f8d3 	bl	8004acc <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d103      	bne.n	8004944 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e013      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004948:	897b      	ldrh	r3, [r7, #10]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	4906      	ldr	r1, [pc, #24]	; (8004978 <I2C_RequestMemoryRead+0x1cc>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f90b 	bl	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	00010002 	.word	0x00010002

0800497c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <I2C_DMAAbort+0x148>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	4a4a      	ldr	r2, [pc, #296]	; (8004ac8 <I2C_DMAAbort+0x14c>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0a1a      	lsrs	r2, r3, #8
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00da      	lsls	r2, r3, #3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049c2:	e00a      	b.n	80049da <I2C_DMAAbort+0x5e>
    }
    count--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d0ea      	beq.n	80049b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2200      	movs	r2, #0
 80049e8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a08:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b60      	cmp	r3, #96	; 0x60
 8004a4a:	d10e      	bne.n	8004a6a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a62:	6978      	ldr	r0, [r7, #20]
 8004a64:	f7fe fcb9 	bl	80033da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a68:	e027      	b.n	8004aba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a70:	2b28      	cmp	r3, #40	; 0x28
 8004a72:	d117      	bne.n	8004aa4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2228      	movs	r2, #40	; 0x28
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aa2:	e007      	b.n	8004ab4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ab4:	6978      	ldr	r0, [r7, #20]
 8004ab6:	f7fe fc87 	bl	80033c8 <HAL_I2C_ErrorCallback>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	14f8b589 	.word	0x14f8b589

08004acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004adc:	e025      	b.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d021      	beq.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fc f8a9 	bl	8000c3c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d116      	bne.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f043 0220 	orr.w	r2, r3, #32
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e023      	b.n	8004b72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10d      	bne.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf0c      	ite	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	2300      	movne	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	e00c      	b.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf0c      	ite	eq
 8004b62:	2301      	moveq	r3, #1
 8004b64:	2300      	movne	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d0b6      	beq.n	8004ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b88:	e051      	b.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d123      	bne.n	8004be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0204 	orr.w	r2, r3, #4
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e046      	b.n	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d021      	beq.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fc f827 	bl	8000c3c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d116      	bne.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e020      	b.n	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10c      	bne.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e00b      	b.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	43da      	mvns	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d18d      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c84:	e02d      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f900 	bl	8004e8c <I2C_IsAcknowledgeFailed>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e02d      	b.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d021      	beq.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7fb ffcd 	bl	8000c3c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d302      	bcc.n	8004cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d116      	bne.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e007      	b.n	8004cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d1ca      	bne.n	8004c86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d06:	e02d      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f8bf 	bl	8004e8c <I2C_IsAcknowledgeFailed>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e02d      	b.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d021      	beq.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d20:	f7fb ff8c 	bl	8000c3c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f043 0220 	orr.w	r2, r3, #32
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e007      	b.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d1ca      	bne.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	0a1a      	lsrs	r2, r3, #8
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e008      	b.n	8004dcc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc8:	d0e9      	beq.n	8004d9e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	14f8b589 	.word	0x14f8b589

08004de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dec:	e042      	b.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d119      	bne.n	8004e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0210 	mvn.w	r2, #16
 8004e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e029      	b.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7fb ff04 	bl	8000c3c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d116      	bne.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e007      	b.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d1b5      	bne.n	8004dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea2:	d11b      	bne.n	8004edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f043 0204 	orr.w	r2, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ef8:	d103      	bne.n	8004f02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f00:	e007      	b.n	8004f12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f0a:	d102      	bne.n	8004f12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2208      	movs	r2, #8
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e26c      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8087 	beq.w	800504a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f3c:	4b92      	ldr	r3, [pc, #584]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d00c      	beq.n	8004f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f48:	4b8f      	ldr	r3, [pc, #572]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 030c 	and.w	r3, r3, #12
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d112      	bne.n	8004f7a <HAL_RCC_OscConfig+0x5e>
 8004f54:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f60:	d10b      	bne.n	8004f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f62:	4b89      	ldr	r3, [pc, #548]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d06c      	beq.n	8005048 <HAL_RCC_OscConfig+0x12c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d168      	bne.n	8005048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e246      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x76>
 8004f84:	4b80      	ldr	r3, [pc, #512]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a7f      	ldr	r2, [pc, #508]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e02e      	b.n	8004ff0 <HAL_RCC_OscConfig+0xd4>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x98>
 8004f9a:	4b7b      	ldr	r3, [pc, #492]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7a      	ldr	r2, [pc, #488]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	4b78      	ldr	r3, [pc, #480]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a77      	ldr	r2, [pc, #476]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e01d      	b.n	8004ff0 <HAL_RCC_OscConfig+0xd4>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0xbc>
 8004fbe:	4b72      	ldr	r3, [pc, #456]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a71      	ldr	r2, [pc, #452]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b6f      	ldr	r3, [pc, #444]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6e      	ldr	r2, [pc, #440]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCC_OscConfig+0xd4>
 8004fd8:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a6a      	ldr	r2, [pc, #424]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b68      	ldr	r3, [pc, #416]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a67      	ldr	r2, [pc, #412]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8004fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fb fe20 	bl	8000c3c <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005000:	f7fb fe1c 	bl	8000c3c <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	; 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e1fa      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0xe4>
 800501e:	e014      	b.n	800504a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fb fe0c 	bl	8000c3c <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005028:	f7fb fe08 	bl	8000c3c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1e6      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	4b53      	ldr	r3, [pc, #332]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x10c>
 8005046:	e000      	b.n	800504a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d063      	beq.n	800511e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005056:	4b4c      	ldr	r3, [pc, #304]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005062:	4b49      	ldr	r3, [pc, #292]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b08      	cmp	r3, #8
 800506c:	d11c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x18c>
 800506e:	4b46      	ldr	r3, [pc, #280]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	4b43      	ldr	r3, [pc, #268]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x176>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e1ba      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005092:	4b3d      	ldr	r3, [pc, #244]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4939      	ldr	r1, [pc, #228]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	e03a      	b.n	800511e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b0:	4b36      	ldr	r3, [pc, #216]	; (800518c <HAL_RCC_OscConfig+0x270>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fb fdc1 	bl	8000c3c <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050be:	f7fb fdbd 	bl	8000c3c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e19b      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b2a      	ldr	r3, [pc, #168]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4927      	ldr	r1, [pc, #156]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	e015      	b.n	800511e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <HAL_RCC_OscConfig+0x270>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fb fda0 	bl	8000c3c <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005100:	f7fb fd9c 	bl	8000c3c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e17a      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03a      	beq.n	80051a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d019      	beq.n	8005166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005132:	4b17      	ldr	r3, [pc, #92]	; (8005190 <HAL_RCC_OscConfig+0x274>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005138:	f7fb fd80 	bl	8000c3c <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005140:	f7fb fd7c 	bl	8000c3c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e15a      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_RCC_OscConfig+0x26c>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800515e:	2001      	movs	r0, #1
 8005160:	f000 fada 	bl	8005718 <RCC_Delay>
 8005164:	e01c      	b.n	80051a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_OscConfig+0x274>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516c:	f7fb fd66 	bl	8000c3c <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005172:	e00f      	b.n	8005194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005174:	f7fb fd62 	bl	8000c3c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d908      	bls.n	8005194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e140      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	42420000 	.word	0x42420000
 8005190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005194:	4b9e      	ldr	r3, [pc, #632]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e9      	bne.n	8005174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a6 	beq.w	80052fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b2:	4b97      	ldr	r3, [pc, #604]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051be:	4b94      	ldr	r3, [pc, #592]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4a93      	ldr	r2, [pc, #588]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80051c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c8:	61d3      	str	r3, [r2, #28]
 80051ca:	4b91      	ldr	r3, [pc, #580]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051da:	4b8e      	ldr	r3, [pc, #568]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d118      	bne.n	8005218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e6:	4b8b      	ldr	r3, [pc, #556]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a8a      	ldr	r2, [pc, #552]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f2:	f7fb fd23 	bl	8000c3c <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fa:	f7fb fd1f 	bl	8000c3c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b64      	cmp	r3, #100	; 0x64
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0fd      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520c:	4b81      	ldr	r3, [pc, #516]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d106      	bne.n	800522e <HAL_RCC_OscConfig+0x312>
 8005220:	4b7b      	ldr	r3, [pc, #492]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	4a7a      	ldr	r2, [pc, #488]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6213      	str	r3, [r2, #32]
 800522c:	e02d      	b.n	800528a <HAL_RCC_OscConfig+0x36e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <HAL_RCC_OscConfig+0x334>
 8005236:	4b76      	ldr	r3, [pc, #472]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	4a75      	ldr	r2, [pc, #468]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	6213      	str	r3, [r2, #32]
 8005242:	4b73      	ldr	r3, [pc, #460]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4a72      	ldr	r2, [pc, #456]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	6213      	str	r3, [r2, #32]
 800524e:	e01c      	b.n	800528a <HAL_RCC_OscConfig+0x36e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b05      	cmp	r3, #5
 8005256:	d10c      	bne.n	8005272 <HAL_RCC_OscConfig+0x356>
 8005258:	4b6d      	ldr	r3, [pc, #436]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	4a6c      	ldr	r2, [pc, #432]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	6213      	str	r3, [r2, #32]
 8005264:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	4a69      	ldr	r2, [pc, #420]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6213      	str	r3, [r2, #32]
 8005270:	e00b      	b.n	800528a <HAL_RCC_OscConfig+0x36e>
 8005272:	4b67      	ldr	r3, [pc, #412]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4a66      	ldr	r2, [pc, #408]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	6213      	str	r3, [r2, #32]
 800527e:	4b64      	ldr	r3, [pc, #400]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	4a63      	ldr	r2, [pc, #396]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005284:	f023 0304 	bic.w	r3, r3, #4
 8005288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d015      	beq.n	80052be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005292:	f7fb fcd3 	bl	8000c3c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fb fccf 	bl	8000c3c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0ab      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b0:	4b57      	ldr	r3, [pc, #348]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ee      	beq.n	800529a <HAL_RCC_OscConfig+0x37e>
 80052bc:	e014      	b.n	80052e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052be:	f7fb fcbd 	bl	8000c3c <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fb fcb9 	bl	8000c3c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e095      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052dc:	4b4c      	ldr	r3, [pc, #304]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1ee      	bne.n	80052c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ee:	4b48      	ldr	r3, [pc, #288]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	4a47      	ldr	r2, [pc, #284]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8081 	beq.w	8005406 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005304:	4b42      	ldr	r3, [pc, #264]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 030c 	and.w	r3, r3, #12
 800530c:	2b08      	cmp	r3, #8
 800530e:	d061      	beq.n	80053d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d146      	bne.n	80053a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005318:	4b3f      	ldr	r3, [pc, #252]	; (8005418 <HAL_RCC_OscConfig+0x4fc>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fb fc8d 	bl	8000c3c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005326:	f7fb fc89 	bl	8000c3c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e067      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005338:	4b35      	ldr	r3, [pc, #212]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534c:	d108      	bne.n	8005360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800534e:	4b30      	ldr	r3, [pc, #192]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	492d      	ldr	r1, [pc, #180]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a19      	ldr	r1, [r3, #32]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	430b      	orrs	r3, r1
 8005372:	4927      	ldr	r1, [pc, #156]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <HAL_RCC_OscConfig+0x4fc>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537e:	f7fb fc5d 	bl	8000c3c <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005386:	f7fb fc59 	bl	8000c3c <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e037      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005398:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x46a>
 80053a4:	e02f      	b.n	8005406 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a6:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <HAL_RCC_OscConfig+0x4fc>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fb fc46 	bl	8000c3c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fb fc42 	bl	8000c3c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e020      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x498>
 80053d2:	e018      	b.n	8005406 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e013      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCC_OscConfig+0x4f4>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d106      	bne.n	8005402 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	40007000 	.word	0x40007000
 8005418:	42420060 	.word	0x42420060

0800541c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0d0      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005430:	4b6a      	ldr	r3, [pc, #424]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d910      	bls.n	8005460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b67      	ldr	r3, [pc, #412]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 0207 	bic.w	r2, r3, #7
 8005446:	4965      	ldr	r1, [pc, #404]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0b8      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a58      	ldr	r2, [pc, #352]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005490:	4b53      	ldr	r3, [pc, #332]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800549a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549c:	4b50      	ldr	r3, [pc, #320]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	494d      	ldr	r1, [pc, #308]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d040      	beq.n	800553c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d115      	bne.n	80054fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e07f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d107      	bne.n	80054ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054da:	4b41      	ldr	r3, [pc, #260]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e073      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ea:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e06b      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054fa:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f023 0203 	bic.w	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4936      	ldr	r1, [pc, #216]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	4313      	orrs	r3, r2
 800550a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800550c:	f7fb fb96 	bl	8000c3c <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	e00a      	b.n	800552a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005514:	f7fb fb92 	bl	8000c3c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e053      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552a:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 020c 	and.w	r2, r3, #12
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	429a      	cmp	r2, r3
 800553a:	d1eb      	bne.n	8005514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800553c:	4b27      	ldr	r3, [pc, #156]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d210      	bcs.n	800556c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f023 0207 	bic.w	r2, r3, #7
 8005552:	4922      	ldr	r1, [pc, #136]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e032      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4916      	ldr	r1, [pc, #88]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005586:	4313      	orrs	r3, r2
 8005588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	490e      	ldr	r1, [pc, #56]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055aa:	f000 f821 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 80055ae:	4601      	mov	r1, r0
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	5cd3      	ldrb	r3, [r2, r3]
 80055be:	fa21 f303 	lsr.w	r3, r1, r3
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <HAL_RCC_ClockConfig+0x1cc>)
 80055c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_ClockConfig+0x1d0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb faf4 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40022000 	.word	0x40022000
 80055e0:	40021000 	.word	0x40021000
 80055e4:	08007624 	.word	0x08007624
 80055e8:	20000000 	.word	0x20000000
 80055ec:	20000004 	.word	0x20000004

080055f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f0:	b490      	push	{r4, r7}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80055f6:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80055f8:	1d3c      	adds	r4, r7, #4
 80055fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005600:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b04      	cmp	r3, #4
 8005628:	d002      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x40>
 800562a:	2b08      	cmp	r3, #8
 800562c:	d003      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x46>
 800562e:	e02d      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005630:	4b1e      	ldr	r3, [pc, #120]	; (80056ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005632:	623b      	str	r3, [r7, #32]
      break;
 8005634:	e02d      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	0c9b      	lsrs	r3, r3, #18
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005642:	4413      	add	r3, r2
 8005644:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005648:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005654:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	0c5b      	lsrs	r3, r3, #17
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005662:	4413      	add	r3, r2
 8005664:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005668:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4a0f      	ldr	r2, [pc, #60]	; (80056ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800566e:	fb02 f203 	mul.w	r2, r2, r3
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	e004      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005680:	fb02 f303 	mul.w	r3, r2, r3
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	623b      	str	r3, [r7, #32]
      break;
 800568a:	e002      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800568e:	623b      	str	r3, [r7, #32]
      break;
 8005690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005692:	6a3b      	ldr	r3, [r7, #32]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bc90      	pop	{r4, r7}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	080075fc 	.word	0x080075fc
 80056a4:	0800760c 	.word	0x0800760c
 80056a8:	40021000 	.word	0x40021000
 80056ac:	007a1200 	.word	0x007a1200
 80056b0:	003d0900 	.word	0x003d0900

080056b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b8:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80056ba:	681b      	ldr	r3, [r3, #0]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr
 80056c4:	20000000 	.word	0x20000000

080056c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056cc:	f7ff fff2 	bl	80056b4 <HAL_RCC_GetHCLKFreq>
 80056d0:	4601      	mov	r1, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4a03      	ldr	r2, [pc, #12]	; (80056ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80056de:	5cd3      	ldrb	r3, [r2, r3]
 80056e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40021000 	.word	0x40021000
 80056ec:	08007634 	.word	0x08007634

080056f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056f4:	f7ff ffde 	bl	80056b4 <HAL_RCC_GetHCLKFreq>
 80056f8:	4601      	mov	r1, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	0adb      	lsrs	r3, r3, #11
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4a03      	ldr	r2, [pc, #12]	; (8005714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005706:	5cd3      	ldrb	r3, [r2, r3]
 8005708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40021000 	.word	0x40021000
 8005714:	08007634 	.word	0x08007634

08005718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <RCC_Delay+0x34>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <RCC_Delay+0x38>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	0a5b      	lsrs	r3, r3, #9
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005734:	bf00      	nop
  }
  while (Delay --);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1e5a      	subs	r2, r3, #1
 800573a:	60fa      	str	r2, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f9      	bne.n	8005734 <RCC_Delay+0x1c>
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000000 	.word	0x20000000
 8005750:	10624dd3 	.word	0x10624dd3

08005754 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d07d      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005774:	4b4f      	ldr	r3, [pc, #316]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10d      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005780:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	4a4b      	ldr	r2, [pc, #300]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578a:	61d3      	str	r3, [r2, #28]
 800578c:	4b49      	ldr	r3, [pc, #292]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579c:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d118      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a8:	4b43      	ldr	r3, [pc, #268]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a42      	ldr	r2, [pc, #264]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b4:	f7fb fa42 	bl	8000c3c <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ba:	e008      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fb fa3e 	bl	8000c3c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e06d      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ce:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057da:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02e      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d027      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f8:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005800:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005802:	4b2e      	ldr	r3, [pc, #184]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005808:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800580e:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d014      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581e:	f7fb fa0d 	bl	8000c3c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	e00a      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005826:	f7fb fa09 	bl	8000c3c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f241 3288 	movw	r2, #5000	; 0x1388
 8005834:	4293      	cmp	r3, r2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e036      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583c:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ee      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005848:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4917      	ldr	r1, [pc, #92]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005856:	4313      	orrs	r3, r2
 8005858:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d105      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005878:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	490b      	ldr	r1, [pc, #44]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	4313      	orrs	r3, r2
 8005888:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40007000 	.word	0x40007000
 80058bc:	42420440 	.word	0x42420440

080058c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b08d      	sub	sp, #52	; 0x34
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80058c8:	4b6b      	ldr	r3, [pc, #428]	; (8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80058ca:	f107 040c 	add.w	r4, r7, #12
 80058ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80058d4:	4b69      	ldr	r3, [pc, #420]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	2300      	movs	r3, #0
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e2:	2300      	movs	r3, #0
 80058e4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	2300      	movs	r3, #0
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	f200 80b6 	bhi.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	080059e3 	.word	0x080059e3
 8005904:	08005a49 	.word	0x08005a49
 8005908:	08005a65 	.word	0x08005a65
 800590c:	080059d3 	.word	0x080059d3
 8005910:	08005a65 	.word	0x08005a65
 8005914:	08005a65 	.word	0x08005a65
 8005918:	08005a65 	.word	0x08005a65
 800591c:	080059db 	.word	0x080059db
 8005920:	08005a65 	.word	0x08005a65
 8005924:	08005a65 	.word	0x08005a65
 8005928:	08005a65 	.word	0x08005a65
 800592c:	08005a65 	.word	0x08005a65
 8005930:	08005a65 	.word	0x08005a65
 8005934:	08005a65 	.word	0x08005a65
 8005938:	08005a65 	.word	0x08005a65
 800593c:	08005941 	.word	0x08005941
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005940:	4b4f      	ldr	r3, [pc, #316]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 808a 	beq.w	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	0c9b      	lsrs	r3, r3, #18
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005960:	4413      	add	r3, r2
 8005962:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005966:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d018      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005972:	4b43      	ldr	r3, [pc, #268]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	0c5b      	lsrs	r3, r3, #17
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005980:	4413      	add	r3, r2
 8005982:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	fbb2 f2f3 	udiv	r2, r2, r3
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	fb02 f303 	mul.w	r3, r2, r3
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a2:	e004      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	4a38      	ldr	r2, [pc, #224]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80059a8:	fb02 f303 	mul.w	r3, r2, r3
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80059ae:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ba:	d102      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80059c0:	e052      	b.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	4a31      	ldr	r2, [pc, #196]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80059d0:	e04a      	b.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80059d2:	f7ff fe0d 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 80059d6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80059d8:	e049      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80059da:	f7ff fe09 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 80059de:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80059e0:	e045      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80059e2:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d108      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80059fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a04:	e01f      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d109      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005a12:	4b1b      	ldr	r3, [pc, #108]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8005a1e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a24:	e00f      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a30:	d11c      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005a32:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8005a3e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005a44:	e012      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005a46:	e011      	b.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a48:	f7ff fe52 	bl	80056f0 <HAL_RCC_GetPCLK2Freq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	0b9b      	lsrs	r3, r3, #14
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	3301      	adds	r3, #1
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005a6c:	bf00      	nop
    }
  }
  return (frequency);
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3734      	adds	r7, #52	; 0x34
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	08007610 	.word	0x08007610
 8005a7c:	08007620 	.word	0x08007620
 8005a80:	40021000 	.word	0x40021000
 8005a84:	007a1200 	.word	0x007a1200
 8005a88:	003d0900 	.word	0x003d0900
 8005a8c:	aaaaaaab 	.word	0xaaaaaaab

08005a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e041      	b.n	8005b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fa ffd0 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f000 fcba 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d001      	beq.n	8005b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e044      	b.n	8005bd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_TIM_Base_Start_IT+0xac>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d018      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x6c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x6c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d00e      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x6c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a18      	ldr	r2, [pc, #96]	; (8005be4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x6c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x6c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a15      	ldr	r2, [pc, #84]	; (8005bec <HAL_TIM_Base_Start_IT+0xbc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d111      	bne.n	8005bc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d010      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	e007      	b.n	8005bd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40013400 	.word	0x40013400
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00

08005bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e041      	b.n	8005c86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f839 	bl	8005c8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 fc0a 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_TIM_PWM_Start+0x24>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e022      	b.n	8005d0a <HAL_TIM_PWM_Start+0x6a>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d109      	bne.n	8005cde <HAL_TIM_PWM_Start+0x3e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	e015      	b.n	8005d0a <HAL_TIM_PWM_Start+0x6a>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d109      	bne.n	8005cf8 <HAL_TIM_PWM_Start+0x58>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	bf14      	ite	ne
 8005cf0:	2301      	movne	r3, #1
 8005cf2:	2300      	moveq	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	e008      	b.n	8005d0a <HAL_TIM_PWM_Start+0x6a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e072      	b.n	8005df8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_PWM_Start+0x82>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	e013      	b.n	8005d4a <HAL_TIM_PWM_Start+0xaa>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x92>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d30:	e00b      	b.n	8005d4a <HAL_TIM_PWM_Start+0xaa>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Start+0xa2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	e003      	b.n	8005d4a <HAL_TIM_PWM_Start+0xaa>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fe34 	bl	80069c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <HAL_TIM_PWM_Start+0x160>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIM_PWM_Start+0xcc>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <HAL_TIM_PWM_Start+0x164>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_PWM_Start+0xd0>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_TIM_PWM_Start+0xd2>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <HAL_TIM_PWM_Start+0x160>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x122>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1b      	ldr	r2, [pc, #108]	; (8005e04 <HAL_TIM_PWM_Start+0x164>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x122>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d00e      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x122>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <HAL_TIM_PWM_Start+0x168>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x122>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <HAL_TIM_PWM_Start+0x16c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x122>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <HAL_TIM_PWM_Start+0x170>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d111      	bne.n	8005de6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	d010      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	e007      	b.n	8005df6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00

08005e14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fdca 	bl	80069c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <HAL_TIM_PWM_Stop+0xd8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_TIM_PWM_Stop+0x2c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <HAL_TIM_PWM_Stop+0xdc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIM_PWM_Stop+0x30>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <HAL_TIM_PWM_Stop+0x32>
 8005e44:	2300      	movs	r3, #0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10f      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x66>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	f240 4344 	movw	r3, #1092	; 0x444
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d107      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x66>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <HAL_TIM_PWM_Stop+0x96>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	f240 4344 	movw	r3, #1092	; 0x444
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_PWM_Stop+0x96>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Stop+0xa6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb8:	e013      	b.n	8005ee2 <HAL_TIM_PWM_Stop+0xce>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Stop+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec8:	e00b      	b.n	8005ee2 <HAL_TIM_PWM_Stop+0xce>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Stop+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed8:	e003      	b.n	8005ee2 <HAL_TIM_PWM_Stop+0xce>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40013400 	.word	0x40013400

08005ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0202 	mvn.w	r2, #2
 8005f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa6b 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa5e 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa6d 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0204 	mvn.w	r2, #4
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa41 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa34 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fa43 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa17 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa0a 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fa19 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b10      	cmp	r3, #16
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0210 	mvn.w	r2, #16
 800601c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2208      	movs	r2, #8
 8006022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9ed 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9e0 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f9ef 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10e      	bne.n	8006078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0201 	mvn.w	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9bb 	bl	80063ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d10e      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d107      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fd27 	bl	8006af2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d10e      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9b3 	bl	8006436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0220 	mvn.w	r2, #32
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fcf2 	bl	8006ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800611a:	2302      	movs	r3, #2
 800611c:	e0ac      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x174>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	f200 809f 	bhi.w	800626c <HAL_TIM_PWM_ConfigChannel+0x168>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006169 	.word	0x08006169
 8006138:	0800626d 	.word	0x0800626d
 800613c:	0800626d 	.word	0x0800626d
 8006140:	0800626d 	.word	0x0800626d
 8006144:	080061a9 	.word	0x080061a9
 8006148:	0800626d 	.word	0x0800626d
 800614c:	0800626d 	.word	0x0800626d
 8006150:	0800626d 	.word	0x0800626d
 8006154:	080061eb 	.word	0x080061eb
 8006158:	0800626d 	.word	0x0800626d
 800615c:	0800626d 	.word	0x0800626d
 8006160:	0800626d 	.word	0x0800626d
 8006164:	0800622b 	.word	0x0800622b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f9e4 	bl	800653c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0208 	orr.w	r2, r2, #8
 8006182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0204 	bic.w	r2, r2, #4
 8006192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	619a      	str	r2, [r3, #24]
      break;
 80061a6:	e062      	b.n	800626e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fa34 	bl	800661c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6999      	ldr	r1, [r3, #24]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	619a      	str	r2, [r3, #24]
      break;
 80061e8:	e041      	b.n	800626e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fa87 	bl	8006704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0208 	orr.w	r2, r2, #8
 8006204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0204 	bic.w	r2, r2, #4
 8006214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69d9      	ldr	r1, [r3, #28]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	61da      	str	r2, [r3, #28]
      break;
 8006228:	e021      	b.n	800626e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fadb 	bl	80067ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69da      	ldr	r2, [r3, #28]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69d9      	ldr	r1, [r3, #28]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	021a      	lsls	r2, r3, #8
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	61da      	str	r2, [r3, #28]
      break;
 800626a:	e000      	b.n	800626e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800626c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIM_ConfigClockSource+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e0a6      	b.n	80063e6 <HAL_TIM_ConfigClockSource+0x166>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d067      	beq.n	80063a0 <HAL_TIM_ConfigClockSource+0x120>
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d80b      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x6c>
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d073      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0x140>
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d802      	bhi.n	80062e2 <HAL_TIM_ConfigClockSource+0x62>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d06f      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062e0:	e078      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d06c      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0x140>
 80062e6:	2b30      	cmp	r3, #48	; 0x30
 80062e8:	d06a      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80062ea:	e073      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062ec:	2b70      	cmp	r3, #112	; 0x70
 80062ee:	d00d      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x8c>
 80062f0:	2b70      	cmp	r3, #112	; 0x70
 80062f2:	d804      	bhi.n	80062fe <HAL_TIM_ConfigClockSource+0x7e>
 80062f4:	2b50      	cmp	r3, #80	; 0x50
 80062f6:	d033      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0xe0>
 80062f8:	2b60      	cmp	r3, #96	; 0x60
 80062fa:	d041      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80062fc:	e06a      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006302:	d066      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x152>
 8006304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006308:	d017      	beq.n	800633a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800630a:	e063      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	6899      	ldr	r1, [r3, #8]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f000 fb31 	bl	8006982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800632e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]
      break;
 8006338:	e04c      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6899      	ldr	r1, [r3, #8]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f000 fb1a 	bl	8006982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800635c:	609a      	str	r2, [r3, #8]
      break;
 800635e:	e039      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	461a      	mov	r2, r3
 800636e:	f000 fa91 	bl	8006894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2150      	movs	r1, #80	; 0x50
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fae8 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 800637e:	e029      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	461a      	mov	r2, r3
 800638e:	f000 faaf 	bl	80068f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2160      	movs	r1, #96	; 0x60
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fad8 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 800639e:	e019      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f000 fa71 	bl	8006894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2140      	movs	r1, #64	; 0x40
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fac8 	bl	800694e <TIM_ITRx_SetConfig>
      break;
 80063be:	e009      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f000 fabf 	bl	800694e <TIM_ITRx_SetConfig>
        break;
 80063d0:	e000      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80063d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a33      	ldr	r2, [pc, #204]	; (8006528 <TIM_Base_SetConfig+0xe0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a32      	ldr	r2, [pc, #200]	; (800652c <TIM_Base_SetConfig+0xe4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2f      	ldr	r2, [pc, #188]	; (8006530 <TIM_Base_SetConfig+0xe8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <TIM_Base_SetConfig+0xec>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <TIM_Base_SetConfig+0xf0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <TIM_Base_SetConfig+0xe0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <TIM_Base_SetConfig+0x82>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <TIM_Base_SetConfig+0xe4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00f      	beq.n	80064ca <TIM_Base_SetConfig+0x82>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d00b      	beq.n	80064ca <TIM_Base_SetConfig+0x82>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <TIM_Base_SetConfig+0xe8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d007      	beq.n	80064ca <TIM_Base_SetConfig+0x82>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <TIM_Base_SetConfig+0xec>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <TIM_Base_SetConfig+0x82>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <TIM_Base_SetConfig+0xf0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d108      	bne.n	80064dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <TIM_Base_SetConfig+0xe0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_Base_SetConfig+0xc8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a08      	ldr	r2, [pc, #32]	; (800652c <TIM_Base_SetConfig+0xe4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d103      	bne.n	8006518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	615a      	str	r2, [r3, #20]
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40013400 	.word	0x40013400
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00

0800653c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f023 0201 	bic.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0302 	bic.w	r3, r3, #2
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a20      	ldr	r2, [pc, #128]	; (8006614 <TIM_OC1_SetConfig+0xd8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC1_SetConfig+0x64>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <TIM_OC1_SetConfig+0xdc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10c      	bne.n	80065ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0308 	bic.w	r3, r3, #8
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0304 	bic.w	r3, r3, #4
 80065b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <TIM_OC1_SetConfig+0xd8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC1_SetConfig+0x8e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a14      	ldr	r2, [pc, #80]	; (8006618 <TIM_OC1_SetConfig+0xdc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400

0800661c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0210 	bic.w	r2, r3, #16
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a21      	ldr	r2, [pc, #132]	; (80066fc <TIM_OC2_SetConfig+0xe0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC2_SetConfig+0x68>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a20      	ldr	r2, [pc, #128]	; (8006700 <TIM_OC2_SetConfig+0xe4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d10d      	bne.n	80066a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a16      	ldr	r2, [pc, #88]	; (80066fc <TIM_OC2_SetConfig+0xe0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC2_SetConfig+0x94>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <TIM_OC2_SetConfig+0xe4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400

08006704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800674c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a21      	ldr	r2, [pc, #132]	; (80067e4 <TIM_OC3_SetConfig+0xe0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_OC3_SetConfig+0x66>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a20      	ldr	r2, [pc, #128]	; (80067e8 <TIM_OC3_SetConfig+0xe4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d10d      	bne.n	8006786 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a16      	ldr	r2, [pc, #88]	; (80067e4 <TIM_OC3_SetConfig+0xe0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_OC3_SetConfig+0x92>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <TIM_OC3_SetConfig+0xe4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d113      	bne.n	80067be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800679c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	621a      	str	r2, [r3, #32]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40013400 	.word	0x40013400

080067ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a11      	ldr	r2, [pc, #68]	; (800688c <TIM_OC4_SetConfig+0xa0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC4_SetConfig+0x68>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a10      	ldr	r2, [pc, #64]	; (8006890 <TIM_OC4_SetConfig+0xa4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d109      	bne.n	8006868 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr
 800688c:	40012c00 	.word	0x40012c00
 8006890:	40013400 	.word	0x40013400

08006894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f023 030a 	bic.w	r3, r3, #10
 80068d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f023 0210 	bic.w	r2, r3, #16
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800691a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	031b      	lsls	r3, r3, #12
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800692c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	621a      	str	r2, [r3, #32]
}
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	f043 0307 	orr.w	r3, r3, #7
 8006970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	609a      	str	r2, [r3, #8]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr

08006982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	021a      	lsls	r2, r3, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	609a      	str	r2, [r3, #8]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr

080069c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2201      	movs	r2, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e050      	b.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d018      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a19      	ldr	r2, [pc, #100]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a76:	d00e      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d009      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a12      	ldr	r2, [pc, #72]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10c      	bne.n	8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40013400 	.word	0x40013400
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00

08006ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <appInit>:
#include <buttons.h>

uint8_t flag = 0;

uint8_t readbyte = 0;
void appInit(void) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
	initAppState();
 8006b08:	f000 f826 	bl	8006b58 <initAppState>
	initEncoder();
 8006b0c:	f000 fb62 	bl	80071d4 <initEncoder>


	HAL_TIM_Base_Start_IT(&htim2);
 8006b10:	4802      	ldr	r0, [pc, #8]	; (8006b1c <appInit+0x18>)
 8006b12:	f7ff f80d 	bl	8005b30 <HAL_TIM_Base_Start_IT>
}
 8006b16:	bf00      	nop
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200001f0 	.word	0x200001f0

08006b20 <timer>:

void timer(void) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
	updateCurrent();
 8006b24:	f000 fbbc 	bl	80072a0 <updateCurrent>
	readEncoder();
 8006b28:	f000 fb6c 	bl	8007204 <readEncoder>
	updateButtons();
 8006b2c:	f000 f8fa 	bl	8006d24 <updateButtons>
	updatePowerMonitor();
 8006b30:	f000 fd02 	bl	8007538 <updatePowerMonitor>
}
 8006b34:	bf00      	nop
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <mainLoop>:

void mainLoop(void) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
	if (saveStateFlag == 1) {
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <mainLoop+0x1c>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d104      	bne.n	8006b4e <mainLoop+0x16>
		saveStateFlag = 0;
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <mainLoop+0x1c>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	701a      	strb	r2, [r3, #0]
		SaveState();
 8006b4a:	f000 f82d 	bl	8006ba8 <SaveState>
	}
}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	2000023c 	.word	0x2000023c

08006b58 <initAppState>:
#include "appState.h"
#include <ee24.h>

void initAppState() {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
	LoadState();
 8006b5c:	f000 f858 	bl	8006c10 <LoadState>

}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <getStateChecksum>:

uint32_t getStateChecksum(struct Position s) {
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	1d3b      	adds	r3, r7, #4
 8006b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t sum = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
	uint8_t *p = (uint8_t*) &s;
 8006b74:	1d3b      	adds	r3, r7, #4
 8006b76:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(s); i++) {
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e00a      	b.n	8006b94 <getStateChecksum+0x30>
		sum += p[i];
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4413      	add	r3, r2
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < sizeof(s); i++) {
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d9f1      	bls.n	8006b7e <getStateChecksum+0x1a>
	}

	return sum;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3724      	adds	r7, #36	; 0x24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
	...

08006ba8 <SaveState>:

void SaveState() {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
	if (ee24_isConnected()) {
 8006bae:	f000 fa55 	bl	800705c <ee24_isConnected>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d023      	beq.n	8006c00 <SaveState+0x58>
		uint32_t sum = getStateChecksum(state.position);
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <SaveState+0x60>)
 8006bba:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4611      	mov	r1, r2
 8006bca:	895a      	ldrh	r2, [r3, #10]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f362 030f 	bfi	r3, r2, #0, #16
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f7ff ffc6 	bl	8006b64 <getStateChecksum>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	607b      	str	r3, [r7, #4]
		uint8_t *sum_p = (uint8_t*) &sum;
 8006bdc:	1d3b      	adds	r3, r7, #4
 8006bde:	60fb      	str	r3, [r7, #12]
		ee24_write(0, sum_p, sizeof(sum), 1000);
 8006be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006be4:	2204      	movs	r2, #4
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	2000      	movs	r0, #0
 8006bea:	f000 fa49 	bl	8007080 <ee24_write>
		uint8_t *state_p = (uint8_t*) &state.position;
 8006bee:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <SaveState+0x64>)
 8006bf0:	60bb      	str	r3, [r7, #8]
		ee24_write(sizeof(sum), state_p, sizeof(state.position), 1000);
 8006bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	2004      	movs	r0, #4
 8006bfc:	f000 fa40 	bl	8007080 <ee24_write>
	}
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000240 	.word	0x20000240
 8006c0c:	20000242 	.word	0x20000242

08006c10 <LoadState>:

void LoadState() {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
	if (ee24_isConnected()) {
 8006c16:	f000 fa21 	bl	800705c <ee24_isConnected>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d026      	beq.n	8006c6e <LoadState+0x5e>
		uint32_t sum = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
		struct Position readState;

		uint8_t *sum_p = (uint8_t*) &sum;
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	61fb      	str	r3, [r7, #28]
		ee24_read(0, sum_p, sizeof(sum), 1000);
 8006c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c2e:	2204      	movs	r2, #4
 8006c30:	69f9      	ldr	r1, [r7, #28]
 8006c32:	2000      	movs	r0, #0
 8006c34:	f000 fa90 	bl	8007158 <ee24_read>

		uint8_t *state_p = (uint8_t*) &readState;
 8006c38:	1d3b      	adds	r3, r7, #4
 8006c3a:	61bb      	str	r3, [r7, #24]
		ee24_read(sizeof(sum), state_p, sizeof(readState), 1000);
 8006c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c40:	220a      	movs	r2, #10
 8006c42:	69b9      	ldr	r1, [r7, #24]
 8006c44:	2004      	movs	r0, #4
 8006c46:	f000 fa87 	bl	8007158 <ee24_read>

		uint32_t calculatedChecksum = getStateChecksum(readState);
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c50:	f7ff ff88 	bl	8006b64 <getStateChecksum>
 8006c54:	6178      	str	r0, [r7, #20]
		if (calculatedChecksum == sum) {
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d107      	bne.n	8006c6e <LoadState+0x5e>
			state.position = readState;
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <LoadState+0x68>)
 8006c60:	1c9a      	adds	r2, r3, #2
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	cb03      	ldmia	r3!, {r0, r1}
 8006c66:	6010      	str	r0, [r2, #0]
 8006c68:	6051      	str	r1, [r2, #4]
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	8113      	strh	r3, [r2, #8]
		}
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000240 	.word	0x20000240

08006c7c <bridgeLeft>:
#include <bridge.h>
#include <tim.h>
#include <gpio.h>

void bridgeLeft()
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //LEFT HIGH
 8006c80:	2108      	movs	r1, #8
 8006c82:	480a      	ldr	r0, [pc, #40]	; (8006cac <bridgeLeft+0x30>)
 8006c84:	f7ff f80c 	bl	8005ca0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4); //RIGHT HIGH
 8006c88:	210c      	movs	r1, #12
 8006c8a:	4808      	ldr	r0, [pc, #32]	; (8006cac <bridgeLeft+0x30>)
 8006c8c:	f7ff f8c2 	bl	8005e14 <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(BRIDGE1_LEFT_LOW_GPIO_Port, BRIDGE1_LEFT_LOW_Pin, GPIO_PIN_SET);
 8006c90:	2201      	movs	r2, #1
 8006c92:	2104      	movs	r1, #4
 8006c94:	4806      	ldr	r0, [pc, #24]	; (8006cb0 <bridgeLeft+0x34>)
 8006c96:	f7fb fb54 	bl	8002342 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRIDGE1_RIGHT_LOW_GPIO_Port, BRIDGE1_RIGHT_LOW_Pin, GPIO_PIN_RESET);
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ca0:	4803      	ldr	r0, [pc, #12]	; (8006cb0 <bridgeLeft+0x34>)
 8006ca2:	f7fb fb4e 	bl	8002342 <HAL_GPIO_WritePin>
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200001a8 	.word	0x200001a8
 8006cb0:	40010c00 	.word	0x40010c00

08006cb4 <bridgeRight>:

void bridgeRight()
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); //LEFT HIGH
 8006cb8:	2108      	movs	r1, #8
 8006cba:	480a      	ldr	r0, [pc, #40]	; (8006ce4 <bridgeRight+0x30>)
 8006cbc:	f7ff f8aa 	bl	8005e14 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // RIGHT HIGH
 8006cc0:	210c      	movs	r1, #12
 8006cc2:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <bridgeRight+0x30>)
 8006cc4:	f7fe ffec 	bl	8005ca0 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(BRIDGE1_LEFT_LOW_GPIO_Port, BRIDGE1_LEFT_LOW_Pin, GPIO_PIN_RESET);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2104      	movs	r1, #4
 8006ccc:	4806      	ldr	r0, [pc, #24]	; (8006ce8 <bridgeRight+0x34>)
 8006cce:	f7fb fb38 	bl	8002342 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRIDGE1_RIGHT_LOW_GPIO_Port, BRIDGE1_RIGHT_LOW_Pin, GPIO_PIN_SET);
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cd8:	4803      	ldr	r0, [pc, #12]	; (8006ce8 <bridgeRight+0x34>)
 8006cda:	f7fb fb32 	bl	8002342 <HAL_GPIO_WritePin>
}
 8006cde:	bf00      	nop
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200001a8 	.word	0x200001a8
 8006ce8:	40010c00 	.word	0x40010c00

08006cec <bridgeOff>:

void bridgeOff(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8006cf0:	2108      	movs	r1, #8
 8006cf2:	480a      	ldr	r0, [pc, #40]	; (8006d1c <bridgeOff+0x30>)
 8006cf4:	f7ff f88e 	bl	8005e14 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8006cf8:	210c      	movs	r1, #12
 8006cfa:	4808      	ldr	r0, [pc, #32]	; (8006d1c <bridgeOff+0x30>)
 8006cfc:	f7ff f88a 	bl	8005e14 <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(BRIDGE1_LEFT_LOW_GPIO_Port, BRIDGE1_LEFT_LOW_Pin, GPIO_PIN_SET);
 8006d00:	2201      	movs	r2, #1
 8006d02:	2104      	movs	r1, #4
 8006d04:	4806      	ldr	r0, [pc, #24]	; (8006d20 <bridgeOff+0x34>)
 8006d06:	f7fb fb1c 	bl	8002342 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRIDGE1_RIGHT_LOW_GPIO_Port, BRIDGE1_RIGHT_LOW_Pin, GPIO_PIN_SET);
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d10:	4803      	ldr	r0, [pc, #12]	; (8006d20 <bridgeOff+0x34>)
 8006d12:	f7fb fb16 	bl	8002342 <HAL_GPIO_WritePin>
}
 8006d16:	bf00      	nop
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200001a8 	.word	0x200001a8
 8006d20:	40010c00 	.word	0x40010c00

08006d24 <updateButtons>:
static void buttonUp(uint8_t button);
static void buttonLongDown(uint8_t button);
static void buttonUpAfterLongPress(uint8_t button);
const uint32_t LONG_PRESS_TICKS = 2000;

void updateButtons() {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
	buttonState[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin)
 8006d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d2e:	485d      	ldr	r0, [pc, #372]	; (8006ea4 <updateButtons+0x180>)
 8006d30:	f7fb faf0 	bl	8002314 <HAL_GPIO_ReadPin>
 8006d34:	4603      	mov	r3, r0
			== GPIO_PIN_RESET;
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
	buttonState[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin)
 8006d42:	4b59      	ldr	r3, [pc, #356]	; (8006ea8 <updateButtons+0x184>)
 8006d44:	701a      	strb	r2, [r3, #0]
	buttonState[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin)
 8006d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d4a:	4856      	ldr	r0, [pc, #344]	; (8006ea4 <updateButtons+0x180>)
 8006d4c:	f7fb fae2 	bl	8002314 <HAL_GPIO_ReadPin>
 8006d50:	4603      	mov	r3, r0
			== GPIO_PIN_RESET;
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
	buttonState[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin)
 8006d5e:	4b52      	ldr	r3, [pc, #328]	; (8006ea8 <updateButtons+0x184>)
 8006d60:	705a      	strb	r2, [r3, #1]
	buttonState[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin)
 8006d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d66:	484f      	ldr	r0, [pc, #316]	; (8006ea4 <updateButtons+0x180>)
 8006d68:	f7fb fad4 	bl	8002314 <HAL_GPIO_ReadPin>
 8006d6c:	4603      	mov	r3, r0
			== GPIO_PIN_RESET;
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bf0c      	ite	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	2300      	movne	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
	buttonState[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin)
 8006d7a:	4b4b      	ldr	r3, [pc, #300]	; (8006ea8 <updateButtons+0x184>)
 8006d7c:	709a      	strb	r2, [r3, #2]
	buttonState[3] = HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin)
 8006d7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d82:	4848      	ldr	r0, [pc, #288]	; (8006ea4 <updateButtons+0x180>)
 8006d84:	f7fb fac6 	bl	8002314 <HAL_GPIO_ReadPin>
 8006d88:	4603      	mov	r3, r0
			== GPIO_PIN_RESET;
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	2300      	movne	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	461a      	mov	r2, r3
	buttonState[3] = HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin)
 8006d96:	4b44      	ldr	r3, [pc, #272]	; (8006ea8 <updateButtons+0x184>)
 8006d98:	70da      	strb	r2, [r3, #3]
	buttonState[4] = HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin)
 8006d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d9e:	4841      	ldr	r0, [pc, #260]	; (8006ea4 <updateButtons+0x180>)
 8006da0:	f7fb fab8 	bl	8002314 <HAL_GPIO_ReadPin>
 8006da4:	4603      	mov	r3, r0
			== GPIO_PIN_RESET;
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf0c      	ite	eq
 8006daa:	2301      	moveq	r3, #1
 8006dac:	2300      	movne	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
	buttonState[4] = HAL_GPIO_ReadPin(BUTTON5_GPIO_Port, BUTTON5_Pin)
 8006db2:	4b3d      	ldr	r3, [pc, #244]	; (8006ea8 <updateButtons+0x184>)
 8006db4:	711a      	strb	r2, [r3, #4]

	for (uint8_t i = 0; i < sizeof(buttonState); i++) {
 8006db6:	2300      	movs	r3, #0
 8006db8:	71fb      	strb	r3, [r7, #7]
 8006dba:	e06b      	b.n	8006e94 <updateButtons+0x170>
		if (buttonState[i] && !buttonPrevState[i]) {
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	4a3a      	ldr	r2, [pc, #232]	; (8006ea8 <updateButtons+0x184>)
 8006dc0:	5cd3      	ldrb	r3, [r2, r3]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <updateButtons+0xbe>
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	4a38      	ldr	r2, [pc, #224]	; (8006eac <updateButtons+0x188>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <updateButtons+0xbe>
			buttonTicks[i] = 0;
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	4a37      	ldr	r2, [pc, #220]	; (8006eb0 <updateButtons+0x18c>)
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			buttonDown(i);
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 f869 	bl	8006eb4 <buttonDown>
		}
		if (!buttonState[i] && buttonPrevState[i]) {
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	4a30      	ldr	r2, [pc, #192]	; (8006ea8 <updateButtons+0x184>)
 8006de6:	5cd3      	ldrb	r3, [r2, r3]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d11a      	bne.n	8006e22 <updateButtons+0xfe>
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	4a2f      	ldr	r2, [pc, #188]	; (8006eac <updateButtons+0x188>)
 8006df0:	5cd3      	ldrb	r3, [r2, r3]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d015      	beq.n	8006e22 <updateButtons+0xfe>
			if (buttonTicks[i] < LONG_PRESS_TICKS) {
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	4a2d      	ldr	r2, [pc, #180]	; (8006eb0 <updateButtons+0x18c>)
 8006dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d204      	bcs.n	8006e10 <updateButtons+0xec>
				buttonUp(i);
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f883 	bl	8006f14 <buttonUp>
 8006e0e:	e008      	b.n	8006e22 <updateButtons+0xfe>
			} else {
				buttonUpAfterLongPress(i);
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f906 	bl	8007024 <buttonUpAfterLongPress>
				buttonTicks[i] = 0;
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <updateButtons+0x18c>)
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
		}

		if (buttonState[i] && buttonPrevState[i]
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	4a20      	ldr	r2, [pc, #128]	; (8006ea8 <updateButtons+0x184>)
 8006e26:	5cd3      	ldrb	r3, [r2, r3]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d014      	beq.n	8006e56 <updateButtons+0x132>
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <updateButtons+0x188>)
 8006e30:	5cd3      	ldrb	r3, [r2, r3]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00f      	beq.n	8006e56 <updateButtons+0x132>
				&& buttonTicks[i] <= LONG_PRESS_TICKS) {
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <updateButtons+0x18c>)
 8006e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d807      	bhi.n	8006e56 <updateButtons+0x132>
			buttonTicks[i]++;
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	4a19      	ldr	r2, [pc, #100]	; (8006eb0 <updateButtons+0x18c>)
 8006e4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e4e:	3201      	adds	r2, #1
 8006e50:	4917      	ldr	r1, [pc, #92]	; (8006eb0 <updateButtons+0x18c>)
 8006e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (buttonState[i] && buttonPrevState[i]
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <updateButtons+0x184>)
 8006e5a:	5cd3      	ldrb	r3, [r2, r3]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <updateButtons+0x15e>
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <updateButtons+0x188>)
 8006e64:	5cd3      	ldrb	r3, [r2, r3]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <updateButtons+0x15e>
				&& buttonTicks[i] == LONG_PRESS_TICKS) {
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	4a10      	ldr	r2, [pc, #64]	; (8006eb0 <updateButtons+0x18c>)
 8006e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e72:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d103      	bne.n	8006e82 <updateButtons+0x15e>
			buttonLongDown(i);
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f885 	bl	8006f8c <buttonLongDown>
		}

		buttonPrevState[i] = buttonState[i];
 8006e82:	79fa      	ldrb	r2, [r7, #7]
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	4908      	ldr	r1, [pc, #32]	; (8006ea8 <updateButtons+0x184>)
 8006e88:	5c89      	ldrb	r1, [r1, r2]
 8006e8a:	4a08      	ldr	r2, [pc, #32]	; (8006eac <updateButtons+0x188>)
 8006e8c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < sizeof(buttonState); i++) {
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
 8006e90:	3301      	adds	r3, #1
 8006e92:	71fb      	strb	r3, [r7, #7]
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d990      	bls.n	8006dbc <updateButtons+0x98>
	}
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40010800 	.word	0x40010800
 8006ea8:	20000030 	.word	0x20000030
 8006eac:	20000028 	.word	0x20000028
 8006eb0:	20000038 	.word	0x20000038

08006eb4 <buttonDown>:

uint8_t stopFlag = 0;

void buttonDown(uint8_t button) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
	if (button == 0 && state.currentAction == IDLE) {
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <buttonDown+0x24>
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <buttonDown+0x58>)
 8006ec6:	7d1b      	ldrb	r3, [r3, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d105      	bne.n	8006ed8 <buttonDown+0x24>
		state.currentAction = MOVE_LEFT;
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <buttonDown+0x58>)
 8006ece:	2204      	movs	r2, #4
 8006ed0:	751a      	strb	r2, [r3, #20]
		TurnOnLeft();
 8006ed2:	f000 fafd 	bl	80074d0 <TurnOnLeft>
		return;
 8006ed6:	e016      	b.n	8006f06 <buttonDown+0x52>
	}
	if (button == 1 && state.currentAction == IDLE) {
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d109      	bne.n	8006ef2 <buttonDown+0x3e>
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <buttonDown+0x58>)
 8006ee0:	7d1b      	ldrb	r3, [r3, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <buttonDown+0x3e>
		state.currentAction = MOVE_RIGHT;
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <buttonDown+0x58>)
 8006ee8:	2205      	movs	r2, #5
 8006eea:	751a      	strb	r2, [r3, #20]
		TurnOnRight();
 8006eec:	f000 fb00 	bl	80074f0 <TurnOnRight>
		return;
 8006ef0:	e009      	b.n	8006f06 <buttonDown+0x52>
	}
	if (state.currentAction != IDLE) {
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <buttonDown+0x58>)
 8006ef4:	7d1b      	ldrb	r3, [r3, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <buttonDown+0x52>
		stopFlag = true;
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <buttonDown+0x5c>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	701a      	strb	r2, [r3, #0]
		motorStop();
 8006f00:	f000 fb06 	bl	8007510 <motorStop>
		return;
 8006f04:	bf00      	nop
	}
}
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000240 	.word	0x20000240
 8006f10:	2000004c 	.word	0x2000004c

08006f14 <buttonUp>:

void buttonUp(uint8_t button) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
	if (stopFlag) {
 8006f1e:	4b19      	ldr	r3, [pc, #100]	; (8006f84 <buttonUp+0x70>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <buttonUp+0x1a>
		stopFlag = false;
 8006f26:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <buttonUp+0x70>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
		return;
 8006f2c:	e026      	b.n	8006f7c <buttonUp+0x68>
	}

	if (button == 0 || button == 1) {
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <buttonUp+0x26>
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d102      	bne.n	8006f40 <buttonUp+0x2c>
		motorStop();
 8006f3a:	f000 fae9 	bl	8007510 <motorStop>
		return;
 8006f3e:	e01d      	b.n	8006f7c <buttonUp+0x68>
	}

	if (button == 2) {
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d106      	bne.n	8006f54 <buttonUp+0x40>
		goToPos(state.position.motor1memory1);
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <buttonUp+0x74>)
 8006f48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fa9d 	bl	800748c <goToPos>
		return;
 8006f52:	e013      	b.n	8006f7c <buttonUp+0x68>
	}
	if (button == 3) {
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d106      	bne.n	8006f68 <buttonUp+0x54>
		goToPos(state.position.motor1memory2);
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <buttonUp+0x74>)
 8006f5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fa93 	bl	800748c <goToPos>
		return;
 8006f66:	e009      	b.n	8006f7c <buttonUp+0x68>
	}
	if (button == 4) {
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d106      	bne.n	8006f7c <buttonUp+0x68>
		goToPos(state.position.motor1memory3);
 8006f6e:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <buttonUp+0x74>)
 8006f70:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fa89 	bl	800748c <goToPos>
		return;
 8006f7a:	bf00      	nop
	}


}
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	2000004c 	.word	0x2000004c
 8006f88:	20000240 	.word	0x20000240

08006f8c <buttonLongDown>:

void buttonLongDown(uint8_t button) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
	if (buttonState[0] && buttonState[1] && !stopFlag) {
 8006f96:	4b1f      	ldr	r3, [pc, #124]	; (8007014 <buttonLongDown+0x88>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <buttonLongDown+0x26>
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <buttonLongDown+0x88>)
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <buttonLongDown+0x26>
 8006fa6:	4b1c      	ldr	r3, [pc, #112]	; (8007018 <buttonLongDown+0x8c>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <buttonLongDown+0x26>
		FindZero();
 8006fae:	f000 f967 	bl	8007280 <FindZero>
	}
	if (button == 2) {
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d10b      	bne.n	8006fd0 <buttonLongDown+0x44>
				state.position.motor1memory1 = state.position.motor1pos;
 8006fb8:	4b18      	ldr	r3, [pc, #96]	; (800701c <buttonLongDown+0x90>)
 8006fba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <buttonLongDown+0x90>)
 8006fc0:	80da      	strh	r2, [r3, #6]
				saveStateFlag = true;
 8006fc2:	4b17      	ldr	r3, [pc, #92]	; (8007020 <buttonLongDown+0x94>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
				state.motorBeepFlag = 1;
 8006fc8:	4b14      	ldr	r3, [pc, #80]	; (800701c <buttonLongDown+0x90>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	749a      	strb	r2, [r3, #18]
				return;
 8006fce:	e01d      	b.n	800700c <buttonLongDown+0x80>
			}
			if (button == 3) {
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d10b      	bne.n	8006fee <buttonLongDown+0x62>
				state.position.motor1memory2 = state.position.motor1pos;
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <buttonLongDown+0x90>)
 8006fd8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <buttonLongDown+0x90>)
 8006fde:	811a      	strh	r2, [r3, #8]
				saveStateFlag = true;
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <buttonLongDown+0x94>)
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	701a      	strb	r2, [r3, #0]
				state.motorBeepFlag = 1;
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <buttonLongDown+0x90>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	749a      	strb	r2, [r3, #18]
				return;
 8006fec:	e00e      	b.n	800700c <buttonLongDown+0x80>
			}
			if (button == 4) {
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d10b      	bne.n	800700c <buttonLongDown+0x80>
				state.position.motor1memory3 = state.position.motor1pos;
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <buttonLongDown+0x90>)
 8006ff6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006ffa:	4b08      	ldr	r3, [pc, #32]	; (800701c <buttonLongDown+0x90>)
 8006ffc:	815a      	strh	r2, [r3, #10]
				saveStateFlag = true;
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <buttonLongDown+0x94>)
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
				state.motorBeepFlag = 1;
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <buttonLongDown+0x90>)
 8007006:	2201      	movs	r2, #1
 8007008:	749a      	strb	r2, [r3, #18]
				return;
 800700a:	bf00      	nop
			}
}
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000030 	.word	0x20000030
 8007018:	2000004c 	.word	0x2000004c
 800701c:	20000240 	.word	0x20000240
 8007020:	2000023c 	.word	0x2000023c

08007024 <buttonUpAfterLongPress>:

void buttonUpAfterLongPress(uint8_t button) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
	if (button == 0 || button == 1) {
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <buttonUpAfterLongPress+0x16>
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d10b      	bne.n	8007052 <buttonUpAfterLongPress+0x2e>
		if (state.currentAction != FIND_ZERO && state.currentAction != FIND_MAX)
 800703a:	4b07      	ldr	r3, [pc, #28]	; (8007058 <buttonUpAfterLongPress+0x34>)
 800703c:	7d1b      	ldrb	r3, [r3, #20]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d006      	beq.n	8007050 <buttonUpAfterLongPress+0x2c>
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <buttonUpAfterLongPress+0x34>)
 8007044:	7d1b      	ldrb	r3, [r3, #20]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d002      	beq.n	8007050 <buttonUpAfterLongPress+0x2c>
			motorStop();
 800704a:	f000 fa61 	bl	8007510 <motorStop>
		return;
 800704e:	bf00      	nop
 8007050:	bf00      	nop
	}

}
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000240 	.word	0x20000240

0800705c <ee24_isConnected>:
#endif

uint8_t ee24_lock = 0;
//################################################################################################################
bool ee24_isConnected(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)==HAL_OK)
 8007060:	2364      	movs	r3, #100	; 0x64
 8007062:	2202      	movs	r2, #2
 8007064:	21a0      	movs	r1, #160	; 0xa0
 8007066:	4805      	ldr	r0, [pc, #20]	; (800707c <ee24_isConnected+0x20>)
 8007068:	f7fb fe18 	bl	8002c9c <HAL_I2C_IsDeviceReady>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <ee24_isConnected+0x1a>
    return true;
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <ee24_isConnected+0x1c>
  else
    return false;	
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000110 	.word	0x20000110

08007080 <ee24_write>:
//################################################################################################################
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af04      	add	r7, sp, #16
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	4603      	mov	r3, r0
 800708e:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <ee24_write+0xd0>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <ee24_write+0x1c>
    return false;
 8007098:	2300      	movs	r3, #0
 800709a:	e054      	b.n	8007146 <ee24_write+0xc6>
  ee24_lock = 1; 
 800709c:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <ee24_write+0xd0>)
 800709e:	2201      	movs	r2, #1
 80070a0:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 80070a2:	f7f9 fdcb 	bl	8000c3c <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]
  #if	(_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN,GPIO_PIN_RESET);
  #endif
  while (1)
  {
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f1c3 0310 	rsb	r3, r3, #16
 80070b4:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 80070b6:	8afb      	ldrh	r3, [r7, #22]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d201      	bcs.n	80070c2 <ee24_write+0x42>
      w = len;        
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==4)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)		
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	11db      	asrs	r3, r3, #7
 80070c6:	b21b      	sxth	r3, r3
 80070c8:	f003 030e 	and.w	r3, r3, #14
 80070cc:	b21b      	sxth	r3, r3
 80070ce:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	b299      	uxth	r1, r3
 80070d6:	89fb      	ldrh	r3, [r7, #14]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	b29a      	uxth	r2, r3
 80070dc:	2364      	movs	r3, #100	; 0x64
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	8afb      	ldrh	r3, [r7, #22]
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2301      	movs	r3, #1
 80070ea:	481a      	ldr	r0, [pc, #104]	; (8007154 <ee24_write+0xd4>)
 80070ec:	f7fb fa7a 	bl	80025e4 <HAL_I2C_Mem_Write>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d123      	bne.n	800713e <ee24_write+0xbe>
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
    #endif
    {
      ee24_delay(10);
 80070f6:	200a      	movs	r0, #10
 80070f8:	f7f9 fdaa 	bl	8000c50 <HAL_Delay>
      len -= w;
 80070fc:	8afb      	ldrh	r3, [r7, #22]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	607b      	str	r3, [r7, #4]
      data += w;
 8007104:	8afb      	ldrh	r3, [r7, #22]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	4413      	add	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]
      address += w;
 800710c:	89fa      	ldrh	r2, [r7, #14]
 800710e:	8afb      	ldrh	r3, [r7, #22]
 8007110:	4413      	add	r3, r2
 8007112:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <ee24_write+0xa4>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        ee24_lock = 0;
 800711a:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <ee24_write+0xd0>)
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
        return true;
 8007120:	2301      	movs	r3, #1
 8007122:	e010      	b.n	8007146 <ee24_write+0xc6>
      }
      if (HAL_GetTick() - startTime >= timeout) 
 8007124:	f7f9 fd8a 	bl	8000c3c <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d8b9      	bhi.n	80070a8 <ee24_write+0x28>
      {
        ee24_lock = 0;
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <ee24_write+0xd0>)
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
        return false;
 800713a:	2300      	movs	r3, #0
 800713c:	e003      	b.n	8007146 <ee24_write+0xc6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      ee24_lock = 0;
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <ee24_write+0xd0>)
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
      return false;		
 8007144:	2300      	movs	r3, #0
    }
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	2000004d 	.word	0x2000004d
 8007154:	20000110 	.word	0x20000110

08007158 <ee24_read>:
//################################################################################################################
bool ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af04      	add	r7, sp, #16
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4603      	mov	r3, r0
 8007166:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 8007168:	4b18      	ldr	r3, [pc, #96]	; (80071cc <ee24_read+0x74>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <ee24_read+0x1c>
    return false;
 8007170:	2300      	movs	r3, #0
 8007172:	e027      	b.n	80071c4 <ee24_read+0x6c>
  ee24_lock = 1;
 8007174:	4b15      	ldr	r3, [pc, #84]	; (80071cc <ee24_read+0x74>)
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 4)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
 800717a:	89fb      	ldrh	r3, [r7, #14]
 800717c:	11db      	asrs	r3, r3, #7
 800717e:	b21b      	sxth	r3, r3
 8007180:	f003 030e 	and.w	r3, r3, #14
 8007184:	b21b      	sxth	r3, r3
 8007186:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800718a:	b21b      	sxth	r3, r3
 800718c:	b299      	uxth	r1, r3
 800718e:	89fb      	ldrh	r3, [r7, #14]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	b298      	uxth	r0, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	b29b      	uxth	r3, r3
 8007198:	2264      	movs	r2, #100	; 0x64
 800719a:	9202      	str	r2, [sp, #8]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	2301      	movs	r3, #1
 80071a4:	4602      	mov	r2, r0
 80071a6:	480a      	ldr	r0, [pc, #40]	; (80071d0 <ee24_read+0x78>)
 80071a8:	f7fb fb16 	bl	80027d8 <HAL_I2C_Mem_Read>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <ee24_read+0x64>
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
  #endif
  {
    ee24_lock = 0;
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <ee24_read+0x74>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
    return true;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e003      	b.n	80071c4 <ee24_read+0x6c>
  }
  else
  {
    ee24_lock = 0;
 80071bc:	4b03      	ldr	r3, [pc, #12]	; (80071cc <ee24_read+0x74>)
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
    return false;	
 80071c2:	2300      	movs	r3, #0
  }    
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	2000004d 	.word	0x2000004d
 80071d0:	20000110 	.word	0x20000110

080071d4 <initEncoder>:

GPIO_PinState motor1_prev_state;
GPIO_PinState motor1_initial_state;

void initEncoder()
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
	motor1_initial_state = HAL_GPIO_ReadPin(MOTOR1_ENCODER_GPIO_Port, MOTOR1_ENCODER_Pin);
 80071d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071dc:	4806      	ldr	r0, [pc, #24]	; (80071f8 <initEncoder+0x24>)
 80071de:	f7fb f899 	bl	8002314 <HAL_GPIO_ReadPin>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <initEncoder+0x28>)
 80071e8:	701a      	strb	r2, [r3, #0]
	motor1_prev_state = motor1_initial_state;
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <initEncoder+0x28>)
 80071ec:	781a      	ldrb	r2, [r3, #0]
 80071ee:	4b04      	ldr	r3, [pc, #16]	; (8007200 <initEncoder+0x2c>)
 80071f0:	701a      	strb	r2, [r3, #0]
}
 80071f2:	bf00      	nop
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40011000 	.word	0x40011000
 80071fc:	20000257 	.word	0x20000257
 8007200:	20000256 	.word	0x20000256

08007204 <readEncoder>:

void readEncoder(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
	GPIO_PinState motor1currentState = HAL_GPIO_ReadPin(MOTOR1_ENCODER_GPIO_Port, MOTOR1_ENCODER_Pin);
 800720a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800720e:	4818      	ldr	r0, [pc, #96]	; (8007270 <readEncoder+0x6c>)
 8007210:	f7fb f880 	bl	8002314 <HAL_GPIO_ReadPin>
 8007214:	4603      	mov	r3, r0
 8007216:	71fb      	strb	r3, [r7, #7]
	if (motor1currentState != motor1_prev_state && motor1currentState == motor1_initial_state)
 8007218:	4b16      	ldr	r3, [pc, #88]	; (8007274 <readEncoder+0x70>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	79fa      	ldrb	r2, [r7, #7]
 800721e:	429a      	cmp	r2, r3
 8007220:	d01f      	beq.n	8007262 <readEncoder+0x5e>
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <readEncoder+0x74>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	79fa      	ldrb	r2, [r7, #7]
 8007228:	429a      	cmp	r2, r3
 800722a:	d11a      	bne.n	8007262 <readEncoder+0x5e>
	{
		if (state.motorDirection == LEFT)
 800722c:	4b13      	ldr	r3, [pc, #76]	; (800727c <readEncoder+0x78>)
 800722e:	7cdb      	ldrb	r3, [r3, #19]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d109      	bne.n	8007248 <readEncoder+0x44>
		{
		    state.position.motor1pos--;
 8007234:	4b11      	ldr	r3, [pc, #68]	; (800727c <readEncoder+0x78>)
 8007236:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29b      	uxth	r3, r3
 8007240:	b21a      	sxth	r2, r3
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <readEncoder+0x78>)
 8007244:	805a      	strh	r2, [r3, #2]
 8007246:	e00c      	b.n	8007262 <readEncoder+0x5e>
		}
		else if (state.motorDirection == RIGHT)
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <readEncoder+0x78>)
 800724a:	7cdb      	ldrb	r3, [r3, #19]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d108      	bne.n	8007262 <readEncoder+0x5e>
		{
			state.position.motor1pos++;
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <readEncoder+0x78>)
 8007252:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007256:	b29b      	uxth	r3, r3
 8007258:	3301      	adds	r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	b21a      	sxth	r2, r3
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <readEncoder+0x78>)
 8007260:	805a      	strh	r2, [r3, #2]
		}
	}
	motor1_prev_state = motor1currentState;
 8007262:	4a04      	ldr	r2, [pc, #16]	; (8007274 <readEncoder+0x70>)
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	7013      	strb	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40011000 	.word	0x40011000
 8007274:	20000256 	.word	0x20000256
 8007278:	20000257 	.word	0x20000257
 800727c:	20000240 	.word	0x20000240

08007280 <FindZero>:
static void updateBridgeState();
//static void FindMax(void);
static void handleFindZero(void);
static void handleMotorBeep(void);

void FindZero(void) {
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
	state.currentAction = FIND_ZERO;
 8007284:	4b04      	ldr	r3, [pc, #16]	; (8007298 <FindZero+0x18>)
 8007286:	2201      	movs	r2, #1
 8007288:	751a      	strb	r2, [r3, #20]
	findZeroTicks = 0;
 800728a:	4b04      	ldr	r3, [pc, #16]	; (800729c <FindZero+0x1c>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
	TurnOnLeft();
 8007290:	f000 f91e 	bl	80074d0 <TurnOnLeft>
}
 8007294:	bf00      	nop
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000240 	.word	0x20000240
 800729c:	20000258 	.word	0x20000258

080072a0 <updateCurrent>:
//	state.currentAction = FIND_MAX;
//	findZeroTicks = 0;
//	TurnOnRight();
//}

void updateCurrent() {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80072a6:	481a      	ldr	r0, [pc, #104]	; (8007310 <updateCurrent+0x70>)
 80072a8:	f7f9 fdde 	bl	8000e68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80072ac:	2164      	movs	r1, #100	; 0x64
 80072ae:	4818      	ldr	r0, [pc, #96]	; (8007310 <updateCurrent+0x70>)
 80072b0:	f7f9 fe88 	bl	8000fc4 <HAL_ADC_PollForConversion>
	uint32_t ADC_raw = HAL_ADC_GetValue(&hadc1);
 80072b4:	4816      	ldr	r0, [pc, #88]	; (8007310 <updateCurrent+0x70>)
 80072b6:	f7f9 ff7f 	bl	80011b8 <HAL_ADC_GetValue>
 80072ba:	6078      	str	r0, [r7, #4]
	state.motor1current = ADC_raw;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	b21a      	sxth	r2, r3
 80072c0:	4b14      	ldr	r3, [pc, #80]	; (8007314 <updateCurrent+0x74>)
 80072c2:	81da      	strh	r2, [r3, #14]

	handleFindZero();
 80072c4:	f000 f854 	bl	8007370 <handleFindZero>

	if (state.currentAction == FIND_POS) {
 80072c8:	4b12      	ldr	r3, [pc, #72]	; (8007314 <updateCurrent+0x74>)
 80072ca:	7d1b      	ldrb	r3, [r3, #20]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d117      	bne.n	8007300 <updateCurrent+0x60>
		if (state.position.motor1pos < state.motor1targetpos) {
 80072d0:	4b10      	ldr	r3, [pc, #64]	; (8007314 <updateCurrent+0x74>)
 80072d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80072d6:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <updateCurrent+0x74>)
 80072d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072dc:	429a      	cmp	r2, r3
 80072de:	da02      	bge.n	80072e6 <updateCurrent+0x46>
			TurnOnRight();
 80072e0:	f000 f906 	bl	80074f0 <TurnOnRight>
 80072e4:	e00c      	b.n	8007300 <updateCurrent+0x60>
		} else if (state.position.motor1pos > state.motor1targetpos) {
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <updateCurrent+0x74>)
 80072e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <updateCurrent+0x74>)
 80072ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	dd02      	ble.n	80072fc <updateCurrent+0x5c>
			TurnOnLeft();
 80072f6:	f000 f8eb 	bl	80074d0 <TurnOnLeft>
 80072fa:	e001      	b.n	8007300 <updateCurrent+0x60>
		} else {
			motorStop();
 80072fc:	f000 f908 	bl	8007510 <motorStop>
		}
	}
	handleMotorBeep();
 8007300:	f000 f80a 	bl	8007318 <handleMotorBeep>
	updateBridgeState();
 8007304:	f000 f88a 	bl	800741c <updateBridgeState>

}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000058 	.word	0x20000058
 8007314:	20000240 	.word	0x20000240

08007318 <handleMotorBeep>:

void handleMotorBeep()
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
	if (state.motorBeepFlag && !deadTimeFlag)
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <handleMotorBeep+0x4c>)
 800731e:	7c9b      	ldrb	r3, [r3, #18]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01d      	beq.n	8007360 <handleMotorBeep+0x48>
 8007324:	4b10      	ldr	r3, [pc, #64]	; (8007368 <handleMotorBeep+0x50>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d119      	bne.n	8007360 <handleMotorBeep+0x48>
	{
		motorBeepTicks++;
 800732c:	4b0f      	ldr	r3, [pc, #60]	; (800736c <handleMotorBeep+0x54>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	4a0e      	ldr	r2, [pc, #56]	; (800736c <handleMotorBeep+0x54>)
 8007334:	6013      	str	r3, [r2, #0]
		if (state.motorDirection == LEFT )
 8007336:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <handleMotorBeep+0x4c>)
 8007338:	7cdb      	ldrb	r3, [r3, #19]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d102      	bne.n	8007344 <handleMotorBeep+0x2c>
		{
			TurnOnRight();
 800733e:	f000 f8d7 	bl	80074f0 <TurnOnRight>
 8007342:	e001      	b.n	8007348 <handleMotorBeep+0x30>
		}
		else
		{
			TurnOnLeft();
 8007344:	f000 f8c4 	bl	80074d0 <TurnOnLeft>
		}
		if (motorBeepTicks == 50)
 8007348:	4b08      	ldr	r3, [pc, #32]	; (800736c <handleMotorBeep+0x54>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b32      	cmp	r3, #50	; 0x32
 800734e:	d107      	bne.n	8007360 <handleMotorBeep+0x48>
		{
			motorStop();
 8007350:	f000 f8de 	bl	8007510 <motorStop>
			motorBeepTicks =0;
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <handleMotorBeep+0x54>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
			state.motorBeepFlag = 0;
 800735a:	4b02      	ldr	r3, [pc, #8]	; (8007364 <handleMotorBeep+0x4c>)
 800735c:	2200      	movs	r2, #0
 800735e:	749a      	strb	r2, [r3, #18]
		}
	}
}
 8007360:	bf00      	nop
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000240 	.word	0x20000240
 8007368:	2000004e 	.word	0x2000004e
 800736c:	20000054 	.word	0x20000054

08007370 <handleFindZero>:

void handleFindZero() {
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
	if (state.currentAction != IDLE) {
 8007374:	4b27      	ldr	r3, [pc, #156]	; (8007414 <handleFindZero+0xa4>)
 8007376:	7d1b      	ldrb	r3, [r3, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d048      	beq.n	800740e <handleFindZero+0x9e>
		if (state.motor1current < 10 && findZeroTicks <= 1000) {
 800737c:	4b25      	ldr	r3, [pc, #148]	; (8007414 <handleFindZero+0xa4>)
 800737e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007382:	2b09      	cmp	r3, #9
 8007384:	dc09      	bgt.n	800739a <handleFindZero+0x2a>
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <handleFindZero+0xa8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738e:	d804      	bhi.n	800739a <handleFindZero+0x2a>
			findZeroTicks++;
 8007390:	4b21      	ldr	r3, [pc, #132]	; (8007418 <handleFindZero+0xa8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	4a20      	ldr	r2, [pc, #128]	; (8007418 <handleFindZero+0xa8>)
 8007398:	6013      	str	r3, [r2, #0]
		}
		if (state.motor1current < 10 && findZeroTicks > 1000
 800739a:	4b1e      	ldr	r3, [pc, #120]	; (8007414 <handleFindZero+0xa4>)
 800739c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80073a0:	2b09      	cmp	r3, #9
 80073a2:	dc16      	bgt.n	80073d2 <handleFindZero+0x62>
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <handleFindZero+0xa8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ac:	d911      	bls.n	80073d2 <handleFindZero+0x62>
				&& state.motorDirection == LEFT) {
 80073ae:	4b19      	ldr	r3, [pc, #100]	; (8007414 <handleFindZero+0xa4>)
 80073b0:	7cdb      	ldrb	r3, [r3, #19]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d10d      	bne.n	80073d2 <handleFindZero+0x62>
			findZeroTicks = 0;
 80073b6:	4b18      	ldr	r3, [pc, #96]	; (8007418 <handleFindZero+0xa8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
			state.position.motor1pos = 0;
 80073bc:	4b15      	ldr	r3, [pc, #84]	; (8007414 <handleFindZero+0xa4>)
 80073be:	2200      	movs	r2, #0
 80073c0:	805a      	strh	r2, [r3, #2]
			state.currentAction = IDLE;
 80073c2:	4b14      	ldr	r3, [pc, #80]	; (8007414 <handleFindZero+0xa4>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	751a      	strb	r2, [r3, #20]
			motorStop();
 80073c8:	f000 f8a2 	bl	8007510 <motorStop>
			state.motorBeepFlag = 1;
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <handleFindZero+0xa4>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	749a      	strb	r2, [r3, #18]
		}
		if (state.motor1current < 10 && findZeroTicks > 1000
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <handleFindZero+0xa4>)
 80073d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80073d8:	2b09      	cmp	r3, #9
 80073da:	dc18      	bgt.n	800740e <handleFindZero+0x9e>
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <handleFindZero+0xa8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e4:	d913      	bls.n	800740e <handleFindZero+0x9e>
				&& state.motorDirection == RIGHT) {
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <handleFindZero+0xa4>)
 80073e8:	7cdb      	ldrb	r3, [r3, #19]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d10f      	bne.n	800740e <handleFindZero+0x9e>
			findZeroTicks = 0;
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <handleFindZero+0xa8>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
			state.position.motor1maxpos = state.position.motor1pos;
 80073f4:	4b07      	ldr	r3, [pc, #28]	; (8007414 <handleFindZero+0xa4>)
 80073f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <handleFindZero+0xa4>)
 80073fc:	809a      	strh	r2, [r3, #4]
			state.currentAction = IDLE;
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <handleFindZero+0xa4>)
 8007400:	2200      	movs	r2, #0
 8007402:	751a      	strb	r2, [r3, #20]
			motorStop();
 8007404:	f000 f884 	bl	8007510 <motorStop>
			state.motorBeepFlag = 1;
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <handleFindZero+0xa4>)
 800740a:	2201      	movs	r2, #1
 800740c:	749a      	strb	r2, [r3, #18]
		}
	}

}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000240 	.word	0x20000240
 8007418:	20000258 	.word	0x20000258

0800741c <updateBridgeState>:

void updateBridgeState() {
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
	if (deadTimeFlag && deadTimeTicks < 10) {
 8007420:	4b17      	ldr	r3, [pc, #92]	; (8007480 <updateBridgeState+0x64>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <updateBridgeState+0x1e>
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <updateBridgeState+0x68>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b09      	cmp	r3, #9
 800742e:	d804      	bhi.n	800743a <updateBridgeState+0x1e>
		deadTimeTicks++;
 8007430:	4b14      	ldr	r3, [pc, #80]	; (8007484 <updateBridgeState+0x68>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <updateBridgeState+0x68>)
 8007438:	6013      	str	r3, [r2, #0]
	}

	if (deadTimeFlag && deadTimeTicks >= 10) {
 800743a:	4b11      	ldr	r3, [pc, #68]	; (8007480 <updateBridgeState+0x64>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01c      	beq.n	800747c <updateBridgeState+0x60>
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <updateBridgeState+0x68>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b09      	cmp	r3, #9
 8007448:	d918      	bls.n	800747c <updateBridgeState+0x60>
		deadTimeFlag = 0;
 800744a:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <updateBridgeState+0x64>)
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
		deadTimeTicks = 0;
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <updateBridgeState+0x68>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
		if (state.motorDirection == LEFT) {
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <updateBridgeState+0x6c>)
 8007458:	7cdb      	ldrb	r3, [r3, #19]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d102      	bne.n	8007464 <updateBridgeState+0x48>
			bridgeLeft();
 800745e:	f7ff fc0d 	bl	8006c7c <bridgeLeft>
		} else {
			state.currentAction = IDLE;
			bridgeOff();
		}
	}
}
 8007462:	e00b      	b.n	800747c <updateBridgeState+0x60>
		} else if (state.motorDirection == RIGHT) {
 8007464:	4b08      	ldr	r3, [pc, #32]	; (8007488 <updateBridgeState+0x6c>)
 8007466:	7cdb      	ldrb	r3, [r3, #19]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d102      	bne.n	8007472 <updateBridgeState+0x56>
			bridgeRight();
 800746c:	f7ff fc22 	bl	8006cb4 <bridgeRight>
}
 8007470:	e004      	b.n	800747c <updateBridgeState+0x60>
			state.currentAction = IDLE;
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <updateBridgeState+0x6c>)
 8007474:	2200      	movs	r2, #0
 8007476:	751a      	strb	r2, [r3, #20]
			bridgeOff();
 8007478:	f7ff fc38 	bl	8006cec <bridgeOff>
}
 800747c:	bf00      	nop
 800747e:	bd80      	pop	{r7, pc}
 8007480:	2000004e 	.word	0x2000004e
 8007484:	20000050 	.word	0x20000050
 8007488:	20000240 	.word	0x20000240

0800748c <goToPos>:

void goToPos(int16_t pos) {
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	80fb      	strh	r3, [r7, #6]
	state.currentAction = FIND_POS;
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <goToPos+0x20>)
 8007498:	2203      	movs	r2, #3
 800749a:	751a      	strb	r2, [r3, #20]
	state.motor1targetpos = pos;
 800749c:	4a03      	ldr	r2, [pc, #12]	; (80074ac <goToPos+0x20>)
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	8013      	strh	r3, [r2, #0]
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr
 80074ac:	20000240 	.word	0x20000240

080074b0 <deadTimeStart>:

void deadTimeStart() {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
	deadTimeFlag = 1;
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <deadTimeStart+0x18>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	701a      	strb	r2, [r3, #0]
	deadTimeTicks = 0;
 80074ba:	4b04      	ldr	r3, [pc, #16]	; (80074cc <deadTimeStart+0x1c>)
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
	bridgeOff();
 80074c0:	f7ff fc14 	bl	8006cec <bridgeOff>
}
 80074c4:	bf00      	nop
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	2000004e 	.word	0x2000004e
 80074cc:	20000050 	.word	0x20000050

080074d0 <TurnOnLeft>:

void TurnOnLeft(void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
	if (state.motorDirection != LEFT) {
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <TurnOnLeft+0x1c>)
 80074d6:	7cdb      	ldrb	r3, [r3, #19]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d004      	beq.n	80074e6 <TurnOnLeft+0x16>
		state.motorDirection = LEFT;
 80074dc:	4b03      	ldr	r3, [pc, #12]	; (80074ec <TurnOnLeft+0x1c>)
 80074de:	2201      	movs	r2, #1
 80074e0:	74da      	strb	r2, [r3, #19]
		deadTimeStart();
 80074e2:	f7ff ffe5 	bl	80074b0 <deadTimeStart>
	}
}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000240 	.word	0x20000240

080074f0 <TurnOnRight>:

void TurnOnRight(void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
	if (state.motorDirection != RIGHT) {
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <TurnOnRight+0x1c>)
 80074f6:	7cdb      	ldrb	r3, [r3, #19]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d004      	beq.n	8007506 <TurnOnRight+0x16>
		state.motorDirection = RIGHT;
 80074fc:	4b03      	ldr	r3, [pc, #12]	; (800750c <TurnOnRight+0x1c>)
 80074fe:	2202      	movs	r2, #2
 8007500:	74da      	strb	r2, [r3, #19]
		deadTimeStart();
 8007502:	f7ff ffd5 	bl	80074b0 <deadTimeStart>
	}
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000240 	.word	0x20000240

08007510 <motorStop>:

void motorStop(void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
	state.motorDirection = NONE;
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <motorStop+0x20>)
 8007516:	2200      	movs	r2, #0
 8007518:	74da      	strb	r2, [r3, #19]
	state.currentAction = IDLE;
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <motorStop+0x20>)
 800751c:	2200      	movs	r2, #0
 800751e:	751a      	strb	r2, [r3, #20]
	bridgeOff();
 8007520:	f7ff fbe4 	bl	8006cec <bridgeOff>
	saveStateFlag = 1;
 8007524:	4b03      	ldr	r3, [pc, #12]	; (8007534 <motorStop+0x24>)
 8007526:	2201      	movs	r2, #1
 8007528:	701a      	strb	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000240 	.word	0x20000240
 8007534:	2000023c 	.word	0x2000023c

08007538 <updatePowerMonitor>:
#include <powerMonitor.h>
#include <gpio.h>
#include <appState.h>
#include <power.h>

void updatePowerMonitor(void) {
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(POWER_FAILURE_GPIO_Port, POWER_FAILURE_Pin)
 800753c:	2101      	movs	r1, #1
 800753e:	4811      	ldr	r0, [pc, #68]	; (8007584 <updatePowerMonitor+0x4c>)
 8007540:	f7fa fee8 	bl	8002314 <HAL_GPIO_ReadPin>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <updatePowerMonitor+0x2a>
			== GPIO_PIN_RESET && state.powerFailureFlag == 0) {
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <updatePowerMonitor+0x50>)
 800754c:	7c1b      	ldrb	r3, [r3, #16]
 800754e:	f083 0301 	eor.w	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <updatePowerMonitor+0x2a>
		motorStop();
 8007558:	f7ff ffda 	bl	8007510 <motorStop>
		state.powerFailureFlag = 1;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <updatePowerMonitor+0x50>)
 800755e:	2201      	movs	r2, #1
 8007560:	741a      	strb	r2, [r3, #16]
	}

	if (HAL_GPIO_ReadPin(POWER_FAILURE_GPIO_Port, POWER_FAILURE_Pin)
 8007562:	2101      	movs	r1, #1
 8007564:	4807      	ldr	r0, [pc, #28]	; (8007584 <updatePowerMonitor+0x4c>)
 8007566:	f7fa fed5 	bl	8002314 <HAL_GPIO_ReadPin>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d106      	bne.n	800757e <updatePowerMonitor+0x46>
			== GPIO_PIN_SET && state.powerFailureFlag == 1) {
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <updatePowerMonitor+0x50>)
 8007572:	7c1b      	ldrb	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <updatePowerMonitor+0x46>
		state.powerFailureFlag = 0;
 8007578:	4b03      	ldr	r3, [pc, #12]	; (8007588 <updatePowerMonitor+0x50>)
 800757a:	2200      	movs	r2, #0
 800757c:	741a      	strb	r2, [r3, #16]
		//LoadState();
	}
}
 800757e:	bf00      	nop
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40010800 	.word	0x40010800
 8007588:	20000240 	.word	0x20000240

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	2500      	movs	r5, #0
 8007590:	4e0c      	ldr	r6, [pc, #48]	; (80075c4 <__libc_init_array+0x38>)
 8007592:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007594:	1ba4      	subs	r4, r4, r6
 8007596:	10a4      	asrs	r4, r4, #2
 8007598:	42a5      	cmp	r5, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	f000 f822 	bl	80075e4 <_init>
 80075a0:	2500      	movs	r5, #0
 80075a2:	4e0a      	ldr	r6, [pc, #40]	; (80075cc <__libc_init_array+0x40>)
 80075a4:	4c0a      	ldr	r4, [pc, #40]	; (80075d0 <__libc_init_array+0x44>)
 80075a6:	1ba4      	subs	r4, r4, r6
 80075a8:	10a4      	asrs	r4, r4, #2
 80075aa:	42a5      	cmp	r5, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075b4:	4798      	blx	r3
 80075b6:	3501      	adds	r5, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075be:	4798      	blx	r3
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	0800763c 	.word	0x0800763c
 80075c8:	0800763c 	.word	0x0800763c
 80075cc:	0800763c 	.word	0x0800763c
 80075d0:	08007640 	.word	0x08007640

080075d4 <memset>:
 80075d4:	4603      	mov	r3, r0
 80075d6:	4402      	add	r2, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
